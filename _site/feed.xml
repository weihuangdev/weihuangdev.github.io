<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-23T00:57:50+08:00</updated><id>http://localhost:4000/</id><title type="html">Daniel’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Scala day 24 (variances)</title><link href="http://localhost:4000/scala/2017/12/22/scala_day24.html" rel="alternate" type="text/html" title="Scala day 24 (variances)" /><published>2017-12-22T10:44:17+08:00</published><updated>2017-12-22T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/22/scala_day24</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/22/scala_day24.html">&lt;h3 id=&quot;variances&quot;&gt;variances&lt;/h3&gt;
&lt;p&gt;就是定義可用的型別，以及可用的型別的父子類別的繼承關係．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;abstract class Animal {
  def name: String
}
class Cat(catName: String) extends Animal {
  def name = catName
}

class MexCat(MexCatName: String) extends Cat(MexCatName) {
  override def name = MexCatName
}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;invariant&quot;&gt;Invariant&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class InvariantClass[A]
&lt;span class=&quot;go&quot;&gt;defined class InvariantClass

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: InvariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;invarMethod: (x: InvariantClass[Cat])Unit

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new InvariantClass[MexCat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : InvariantClass[MexCat]
 required: InvariantClass[Cat]
Note: MexCat &amp;lt;: Cat, but class InvariantClass is invariant in type A.
You may wish to define A as +A instead. (SLS 4.5)
       invarMethod(new InvariantClass[MexCat])
                   ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt;   invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new InvariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt;   invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new InvariantClass[Animal]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : InvariantClass[Animal]
 required: InvariantClass[Cat]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Note: Animal &amp;gt;&lt;/span&gt;: Cat, but class InvariantClass is invariant &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;A.
&lt;span class=&quot;go&quot;&gt;You may wish to define A as -A instead. (SLS 4.5)
         invarMethod(new InvariantClass[Animal])
                     ^

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;covariant&quot;&gt;covariant&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class CovariantClass[+A]
&lt;span class=&quot;go&quot;&gt;defined class CovariantClass

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; covarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new CovariantClass[MexCat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; covarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new CovariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; covarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new CovariantClass[Animal]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : CovariantClass[Animal]
 required: CovariantClass[Cat]
         covarMethod(new CovariantClass[Animal])
                     ^

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;contravariant&quot;&gt;Contravariant&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class ContravariantClass[-A]
&lt;span class=&quot;go&quot;&gt;defined class ContravariantClass

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: ContravariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;contraMethod: (x: ContravariantClass[Cat])Unit


&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[MexCat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : ContravariantClass[MexCat]
 required: ContravariantClass[Cat]
         contraMethod(new ContravariantClass[MexCat])
                      ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[Animal]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bounds&quot;&gt;Bounds&lt;/h3&gt;
&lt;p&gt;A &amp;lt;: B Upper bound&lt;/p&gt;

&lt;p&gt;A &amp;gt;: B Lower bound&lt;/p&gt;

&lt;p&gt;A &lt;: Upper=&quot;&quot;&gt;: Lower Lower and upper bounds used together&lt;/:&gt;&lt;/p&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala 的 implicit conversion 主要是透過型態來找到對應，並不是 function 或變數的名稱找．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">variances 就是定義可用的型別，以及可用的型別的父子類別的繼承關係．</summary></entry><entry><title type="html">Scala day 23 (implicit conversion)</title><link href="http://localhost:4000/scala/2017/12/21/scala_day23.html" rel="alternate" type="text/html" title="Scala day 23 (implicit conversion)" /><published>2017-12-21T11:44:17+08:00</published><updated>2017-12-21T11:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/21/scala_day23</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/21/scala_day23.html">&lt;h3 id=&quot;implicit-conversion&quot;&gt;implicit conversion&lt;/h3&gt;
&lt;p&gt;就是在當某物件沒有要呼叫的方法時，可以定義 implicit function 編譯器會嘗試使用 implicit function 來呼叫，將原物件轉換成另一個物件．&lt;br /&gt;
由於 Int 沒有 append 方法所以下面執行會失敗 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; 1 append 2
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: value append is not a member of Int
&lt;span class=&quot;go&quot;&gt;       1 append 2
         ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定義一個 MyAppend 及 append 方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def append(newNum: Int) = num.toString + newNum.toString
     | }
defined class MyAppend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 REPL 直接寫 implicit 會出現 warning，但還是可以使用的 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; implicit def intToMyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new MyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: warning: implicit conversion method intToMyAppend should be enabled
&lt;span class=&quot;go&quot;&gt;by making the implicit value scala.language.implicitConversions visible.
This can be achieved by adding the import clause 'import scala.language.implicitConversions'
or by setting the compiler option -language:implicitConversions.
See the Scaladoc for value scala.language.implicitConversions for a discussion
why the feature should be explicitly enabled.
       implicit def intToMyAppend(x:Int) = new MyAppend(x)
                    ^
intToMyAppend: (x: Int)MyAppend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果不要有 warning 可以 import scala.language.implicitConversions :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.language.implicitConversions
&lt;span class=&quot;go&quot;&gt;import scala.language.implicitConversions

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; implicit def intToMyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new MyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;intToMyAppend: (x: Int)MyAppend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;加上 implicit 函式後，編譯器會在範圍內找到對應型態的 implicit 函式呼叫．所以會變成 intToMyAppend(1) append 2&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; 1 append 2
&lt;span class=&quot;go&quot;&gt;res8: String = 12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;也可以把 implicit 函式抽成一個 object．&lt;/p&gt;

&lt;p&gt;寫一隻 MyAppend.scala 並 compiler :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;class MyAppend(num: Int) {
 def append(newNum: Int) = num.toString + newNum.toString
}

scalac MyAppend.scala
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;寫一隻 MyConvert.scala 並 compiler :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;object MyConvert {
 implicit def intToMyAppend(x:Int) = new MyAppend(x)
}

scalac MyConvert.scala
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;寫一隻 ConvertTest.scala，並將有定義隱含函式的 object(MyConvert) import 進來 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;import MyConvert._

object ConvertTest {
    def main(args: Array[String]): Unit = {
    val result = 1 + 2
    println(result)
    val res = 1 append 2
    println(res)
  }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接著執行 ConvertTest.scala :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;daniel@Danielde-MacBook-Pro &amp;gt;&lt;/span&gt; scala ConvertTest.scala
&lt;span class=&quot;go&quot;&gt;3
12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在方法裡使用 implicit 物件，如果使用該方法時沒傳入物件，則會使用 implicit 物件傳入．
寫一隻 Employees.scala，並 compiler :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;class Employees(name:String ,val amt:Int) {
  def getName = name
}

object Employees {

  import Employees._

  implicit val employee: Employees = new Employees(&quot;Daniel&quot;,50)

  def sayHello(implicit employee: Employees) = &quot;Hello &quot; + employee.getName
}


scalac Employees.scala
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;寫一隻 EmployeesTest.scala，sayHello 沒給參數的話，會帶隱含物件，所以會印出 Daniel．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;object EmployeesTest {
  def main(args: Array[String]): Unit = {
    println(Employees.sayHello)//Hello Daniel
    println(Employees.sayHello(new Employees(&quot;Sam&quot;,5000)))//Hello Sam
  }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;執行時，加上 classpath :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;daniel@Danielde-MacBook-Pro &amp;gt;&lt;/span&gt; scala &lt;span class=&quot;nt&quot;&gt;-cp&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./&quot;&lt;/span&gt; EmployeesTest.scala
&lt;span class=&quot;go&quot;&gt;Hello Daniel
Hello Sam
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala 的 implicit conversion 主要是透過型態來找到對應，並不是 function 或變數的名稱找．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">implicit conversion 就是在當某物件沒有要呼叫的方法時，可以定義 implicit function 編譯器會嘗試使用 implicit function 來呼叫，將原物件轉換成另一個物件． 由於 Int 沒有 append 方法所以下面執行會失敗 :</summary></entry><entry><title type="html">Scala day 22 (Companion Object &amp;amp; apply &amp;amp; update)</title><link href="http://localhost:4000/scala/2017/12/21/scala_day22.html" rel="alternate" type="text/html" title="Scala day 22 (Companion Object &amp; apply &amp; update)" /><published>2017-12-21T10:44:17+08:00</published><updated>2017-12-21T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/21/scala_day22</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/21/scala_day22.html">&lt;h3 id=&quot;companion-object&quot;&gt;Companion Object&lt;/h3&gt;
&lt;p&gt;如果 object 的名稱和 class 名稱相同，稱為 Companion Object (Employee)．
由於 Companion Object 是要將 trait 與 object 定義在同一個檔案裡，但由於這邊是使用 REPL 做 demo，
所以再用一個 object(Emp) 把它們包起來，否則 REPL 的環境不會被視為是 Companion Object，如果是定義在一個 Employee.scala 檔案裡，則不用 Emp 包起來 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.collection.mutable.ListBuffer
&lt;span class=&quot;go&quot;&gt;import scala.collection.mutable.ListBuffer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Emp &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |
     |   class Employee(val salary: Int)
     |
     |   object Employee {
     |
     |     private val emps: ListBuffer[Employee] = new ListBuffer[Employee]
     |
     |     private var sum = 0
     |
     |     def addEmp(emp:Employee) = emps += emp
     |
     |     def sumSalary = {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |       emps.foreach(emp =&amp;gt;&lt;/span&gt; sum +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; emp.salary&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |       sum
     |     }
     |   }
     | }
defined object Emp

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Emp.Employee.addEmp&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new Emp.Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res0: scala.collection.mutable.ListBuffer[Emp.Employee] = ListBuffer(Emp$&lt;/span&gt;Employee@35eee641&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Emp.Employee.addEmp&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new Emp.Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res1: scala.collection.mutable.ListBuffer[Emp.Employee] = ListBuffer(Emp$&lt;/span&gt;Employee@35eee641, Emp&lt;span class=&quot;nv&quot;&gt;$Employee&lt;/span&gt;@4f3c7808&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Emp.Employee.sumSalary
&lt;span class=&quot;go&quot;&gt;res2: Int = 30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;apply-function&quot;&gt;apply function&lt;/h3&gt;
&lt;p&gt;就是將參數傳給(apply) function 的意思&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val sum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int,num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num1 + num2
&lt;span class=&quot;gp&quot;&gt;sum: (Int, Int) =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1197&lt;/span&gt;/530446114@3f06abd
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res15: Int = 5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum.apply&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res14: Int = 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;將參數傳給(apply) object&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val baseNum = 10
     |  def apply(num1:Int , num2:Int) = baseNum + num1 + num2
     | }
defined object Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Counter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res16: Int = 15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;update-function&quot;&gt;update function&lt;/h3&gt;
&lt;p&gt;定義 : 
a(x) = y 相當於 a.update(x, y)，a(x,y) = x 相當於 a.update(x,y,z) 以此類推．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Cellphone &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |
     |   val numbers = scala.collection.mutable.Map[String,(Int,Int)]()
     |
     |   def apply(name:String) = numbers(name)
     |   def update(name:String, number:(Int,Int)) = numbers(name) = number
     | }
defined class Cellphone

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val phonebook &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Cellphone
&lt;span class=&quot;go&quot;&gt;phonebook: Cellphone = Cellphone@1d9af731
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;會呼叫 Cellphone 的 update 方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)=(&lt;/span&gt;123,45678&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)=(&lt;/span&gt;321,876543&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;會呼叫 Cellphone 的 apply 方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res5: (Int, Int) = (123,45678)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res6: (Int, Int) = (321,876543)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;companion-object-with-apply&quot;&gt;Companion Object with apply&lt;/h3&gt;
&lt;p&gt;apply 可以設計成為 factory pattern :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Trans &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   trait Transportation {
     |     def go
     |   }
     |   object Transportation {
     |     private class Car extends Transportation {
     |       override def go {println(&quot;drive car&quot;)}
     |     }
     |     private class Boat extends Transportation {
     |       override def go {println(&quot;drive boat&quot;)}
     |     }
     |     def apply(name:String): Transportation = {
     |       if(name == &quot;car&quot;) {
     |         new Car
     |       } else {
     |         new Boat
     |       }
     |     }
     |   }
     | }
defined object Trans

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val car &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Trans.Transportation&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;car&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;car: Trans.Transportation = Trans$&lt;/span&gt;Transportation&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;@178cfe5e
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; car.go
&lt;span class=&quot;go&quot;&gt;drive car

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val boat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Trans.Transportation&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boat&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;boat: Trans.Transportation = Trans$&lt;/span&gt;Transportation&lt;span class=&quot;nv&quot;&gt;$Boat&lt;/span&gt;@31e90355
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; boat.go
&lt;span class=&quot;go&quot;&gt;drive boat

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala 裡 object 可被視為 function，function 也可被視為 object，這觀念跟物件導向的觀念不太一樣，感覺 Companion Object 、apply、update 等功能也是為了要實作 functional programming．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;參考資料&quot;&gt;參考資料&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;https://stackoverflow.com/questions/9737352/what-is-the-apply-function-in-scala&lt;/p&gt;</content><author><name></name></author><summary type="html">Companion Object 如果 object 的名稱和 class 名稱相同，稱為 Companion Object (Employee)． 由於 Companion Object 是要將 trait 與 object 定義在同一個檔案裡，但由於這邊是使用 REPL 做 demo， 所以再用一個 object(Emp) 把它們包起來，否則 REPL 的環境不會被視為是 Companion Object，如果是定義在一個 Employee.scala 檔案裡，則不用 Emp 包起來 :</summary></entry><entry><title type="html">Scala day 21 (Set)</title><link href="http://localhost:4000/scala/2017/12/20/scala_day21.html" rel="alternate" type="text/html" title="Scala day 21 (Set)" /><published>2017-12-20T10:44:17+08:00</published><updated>2017-12-20T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/20/scala_day21</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/20/scala_day21.html">&lt;h3 id=&quot;set&quot;&gt;Set&lt;/h3&gt;
&lt;p&gt;Set 是一個無法放置相同元素的容器，元素都是唯一的，不會重複．有分為 mutable 及 immutable．&lt;/p&gt;

&lt;h4 id=&quot;immutable-set&quot;&gt;immutable Set&lt;/h4&gt;
&lt;p&gt;內容不可以變動&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Set&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3,4,5,2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nums: scala.collection.immutable.Set[Int] = Set(5, 1, 2, 3, 4)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;判斷該元素是否存在 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res207: Boolean = true

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res208: Boolean = false

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums contains 3
&lt;span class=&quot;go&quot;&gt;res213: Boolean = true

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新增元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums + 6
&lt;span class=&quot;go&quot;&gt;res210: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 2, 3, 4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums + &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6,7,8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res214: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 2, 7, 3, 8, 4)

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;移除元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums - 3
&lt;span class=&quot;go&quot;&gt;res212: scala.collection.immutable.Set[Int] = Set(5, 1, 2, 4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums - &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res215: scala.collection.immutable.Set[Int] = Set(5, 1, 4)

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用位元符號做運算 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val newnums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Set&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11,22,33,44,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;newnums: scala.collection.immutable.Set[Int] = Set(5, 33, 22, 44, 11)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums &amp;amp; newnums
&lt;span class=&quot;go&quot;&gt;res218: scala.collection.immutable.Set[Int] = Set(5)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums | newnums
&lt;span class=&quot;go&quot;&gt;res219: scala.collection.immutable.Set[Int] = Set(5, 1, 33, 2, 22, 44, 3, 11, 4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums union newnums
&lt;span class=&quot;go&quot;&gt;res220: scala.collection.immutable.Set[Int] = Set(5, 1, 33, 2, 22, 44, 3, 11, 4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums &amp;amp;~ newnums
&lt;span class=&quot;go&quot;&gt;res221: scala.collection.immutable.Set[Int] = Set(1, 2, 3, 4)

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mutable-set&quot;&gt;mutable Set&lt;/h4&gt;
&lt;p&gt;內容可以變動&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.collection.mutable.Set
&lt;span class=&quot;go&quot;&gt;import scala.collection.mutable.Set

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val mnums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Set&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3,4,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;mnums: scala.collection.mutable.Set[Int] = Set(1, 5, 2, 3, 4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res0: Boolean = true

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res1: Boolean = false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新增元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6
&lt;span class=&quot;go&quot;&gt;res2: mnums.type = Set(1, 5, 2, 6, 3, 4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums
&lt;span class=&quot;go&quot;&gt;res3: scala.collection.mutable.Set[Int] = Set(1, 5, 2, 6, 3, 4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7,8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res4: mnums.type = Set(1, 5, 2, 6, 3, 7, 4, 8)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums
&lt;span class=&quot;go&quot;&gt;res5: scala.collection.mutable.Set[Int] = Set(1, 5, 2, 6, 3, 7, 4, 8)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;移除元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;go&quot;&gt;res6: mnums.type = Set(1, 5, 2, 6, 7, 4, 8)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res7: mnums.type = Set(1, 5, 6, 7, 8)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; mnums
&lt;span class=&quot;go&quot;&gt;res8: scala.collection.mutable.Set[Int] = Set(1, 5, 6, 7, 8)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;複製元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val mnewnums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mnums.clone
&lt;span class=&quot;go&quot;&gt;mnewnums: scala.collection.mutable.Set[Int] = Set(1, 5, 6, 7, 8)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sort 排序 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Set&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3,1,5,4,8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nums: scala.collection.mutable.Set[Int] = Set(1, 5, 3, 4, 8)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; collection.immutable.SortedSet[Int]&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; ++ nums
&lt;span class=&quot;go&quot;&gt;res10: scala.collection.immutable.SortedSet[Int] = TreeSet(1, 3, 4, 5, 8)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; collection.immutable.TreeSet[Int]&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; ++ nums
&lt;span class=&quot;go&quot;&gt;res11: scala.collection.immutable.TreeSet[Int] = TreeSet(1, 3, 4, 5, 8)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Set 的元素都是唯一的，不會重複．又分為 mutable 及 immutable．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Set Set 是一個無法放置相同元素的容器，元素都是唯一的，不會重複．有分為 mutable 及 immutable．</summary></entry><entry><title type="html">Scala day 20 (Array &amp;amp; ArrayBuffer)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day20.html" rel="alternate" type="text/html" title="Scala day 20 (Array &amp; ArrayBuffer)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day20</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day20.html">&lt;h3 id=&quot;array&quot;&gt;Array&lt;/h3&gt;
&lt;p&gt;Array 是一個固定長度且有順序性的容器，Array 是 mutable 的，在 new 時需給定長度．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val numbers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Array[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;numbers: Array[Int] = Array(0, 0, 0, 0, 0)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers
&lt;span class=&quot;go&quot;&gt;res107: Array[Int] = Array(1, 1, 5, 0, 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;直接給 Array 元素，取出元素直接用 index 即可，從 0 開始 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allen&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Loues&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;names: Array[String] = Array(Allen, Daniel, Jack, Ray, Loues)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res101: String = Allen
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;利用 Array.ofDim 建立多維度的 Array :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val multiNums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array.ofDim[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;multiNums: Array[Array[Int]] = Array(Array(0, 0, 0), Array(0, 0, 0))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val multiNums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array.ofDim[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3,4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;multiNums: Array[Array[Array[Int]]] = Array(Array(Array(0, 0, 0, 0), Array(0, 0, 0, 0), Array(0, 0, 0, 0)), Array(Array(0, 0, 0, 0), Array(0, 0, 0, 0), Array(0, 0, 0, 0)))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums
&lt;span class=&quot;go&quot;&gt;res112: Array[Array[Array[Int]]] = Array(Array(Array(1, 2, 0, 3), Array(0, 0, 0, 0), Array(0, 0, 0, 0)), Array(Array(0, 0, 0, 0), Array(0, 0, 0, 0), Array(0, 0, 0, 0)))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt;- 0 to 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  for(j &amp;lt;- 0 to 2) {
     |   for(k &amp;lt;- 0 to 3) {
     |    println(multiNums(i)(j)(k))
     |   }
     |  }
     | }
1
2
0
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;copy-array-and-compare&quot;&gt;Copy Array and Compare&lt;/h4&gt;
&lt;p&gt;使用 clone 複製 Array :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allen&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,1,&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Loues&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;names: Array[Any] = Array(Allen, Daniel, 1, Ray, Loues)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val cnames &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; names.clone&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cnames: Array[Any] = Array(Allen, Daniel, 1, Ray, Loues)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 == 比較 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; cnames
&lt;span class=&quot;go&quot;&gt;res127: Boolean = false

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names.deep &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; cnames.deep
&lt;span class=&quot;go&quot;&gt;res128: Boolean = true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 sameElements 比較容器的元素內容 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names sameElements cnames
&lt;span class=&quot;go&quot;&gt;res129: Boolean = true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再來看多維度的陣列&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nums1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array.ofDim[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nums1: Array[Array[Int]] = Array(Array(0, 0, 0), Array(0, 0, 0))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 4
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1
&lt;span class=&quot;go&quot;&gt;res134: Array[Array[Int]] = Array(Array(0, 2, 0), Array(0, 3, 4))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;多維度陣列 copy 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nums2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; nums1.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.clone&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nums2: Array[Array[Int]] = Array(Array(0, 2, 0), Array(0, 3, 4))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;多維度陣列的比較，這時候使用 sameElements 就會是 false 但使用 == 比較 deep 還是會是 true :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1 &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; nums2
&lt;span class=&quot;go&quot;&gt;res135: Boolean = false

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1.deep &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; nums2.deep
&lt;span class=&quot;go&quot;&gt;res136: Boolean = true

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1 sameElements nums2
&lt;span class=&quot;go&quot;&gt;res138: Boolean = false

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;arraybuffer&quot;&gt;ArrayBuffer&lt;/h3&gt;
&lt;p&gt;ArrayBuffer 也是 mutable 的，與 Array 差異是它不用給定固定長度．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import collection.mutable.ArrayBuffer
&lt;span class=&quot;go&quot;&gt;import collection.mutable.ArrayBuffer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new ArrayBuffer[String]
&lt;span class=&quot;go&quot;&gt;names: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新增元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Andy&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res142: names.type = ArrayBuffer(Andy)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res143: names.type = ArrayBuffer(Andy, Daniel, Sam)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;刪除元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Andy&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res144: names.type = ArrayBuffer(Daniel)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;轉成 Array&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names.toArray
&lt;span class=&quot;go&quot;&gt;res146: Array[String] = Array(Daniel)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;比較 Array 時，可能用 deep function 後再用 == 比較元素內容會比較準確，因為多維度陣列使用 sameElements 會是錯的．&lt;/li&gt;
  &lt;li&gt;Array 可知道大小時用 Array，如果預先無法知道大小再用 ArrayBuffer．&lt;/li&gt;
  &lt;li&gt;建立Array 用 new Array[Int](5)，多維度Array 用 Array.ofDim[Int](2,3)．&lt;/li&gt;
  &lt;li&gt;copy Array 用 names.clone()，多維度Array 用 nums1.map(_.clone)．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Array Array 是一個固定長度且有順序性的容器，Array 是 mutable 的，在 new 時需給定長度．</summary></entry><entry><title type="html">Scala day 19 (Option type)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day19.html" rel="alternate" type="text/html" title="Scala day 19 (Option type)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day19</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day19.html">&lt;h3 id=&quot;option-type&quot;&gt;Option type&lt;/h3&gt;
&lt;p&gt;Option[T] 有兩個物件 Some(x) 與 None．Some(x) 的 x 是指型別為 T 的值，None 是指沒有這個值．
像下面例子，Map 的 get api 定義 :&lt;br /&gt;
def get(key: K): Option[V]&lt;br /&gt;
所以 Map get 回傳的也是 Option 型態，有值會回傳 Some(Int)，沒有的話會回傳 None :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val emps &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;-&amp;gt;10,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;-&amp;gt;20,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;-&amp;gt;30,&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;-&amp;gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;emps: scala.collection.immutable.Map[String,Int] = Map(Sam -&amp;gt;&lt;/span&gt; 10, Daniel -&amp;gt; 20, Jack -&amp;gt; 30, Ray -&amp;gt; 40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; emps get &lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res82: Option[Int] = Some(20)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; emps get &lt;span class=&quot;s2&quot;&gt;&quot;Dan&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res83: Option[Int] = None
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;運用在-match-expression-&quot;&gt;運用在 Match Expression :&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def Hi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name: Option[String]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; name match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case Some(nm) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi &quot;&lt;/span&gt; + nm
&lt;span class=&quot;gp&quot;&gt;     |  case None =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Not String&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
Hi: (name: Option[String])String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val name:Option[String] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;name: Option[String] = Some(Daniel)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Hi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res85: String = Hi Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Hi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res88: String = Not String
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;運用在-lambda-expression-&quot;&gt;運用在 lambda Expression :&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val initNum: Option[Int] &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case Some(num) =&amp;gt;&lt;/span&gt; num &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2
&lt;span class=&quot;gp&quot;&gt;     |  case None =&amp;gt;&lt;/span&gt; 0
&lt;span class=&quot;go&quot;&gt;     | }
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;initNum: Option[Int] =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1520&lt;/span&gt;/1940548313@253ecbdc
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; initNum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res89: Int = 20

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; initNum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res90: Int = 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;運用-mapflattenflatmap-操作-list-&quot;&gt;運用 map、flatten、flatMap 操作 List :&lt;/h4&gt;
&lt;p&gt;定義一個 function 如果可以轉 Int 則回傳 Some(i) 否則 None&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def initNum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s:Any&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Option[Int] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  try {
     |   Some(Integer.parseInt(s.toString))
     |  } catch {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |   case e: Exception =&amp;gt;&lt;/span&gt; None
&lt;span class=&quot;go&quot;&gt;     |  }
     | }
initNum: (s: Any)Option[Int]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定義一個不同元素 type 的 List :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val empList &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; , 2 , &lt;span class=&quot;s2&quot;&gt;&quot;aa&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;4&quot;&lt;/span&gt; , 5D &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;empList: List[Any] = List(1, 2, aa, 4, 5.0)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 map 可將 List 的每個元素帶到 initNum 這方法然後回傳一個新的 List :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res91: List[Option[Int]] = List(Some(1), Some(2), None, Some(4), None)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;flatten 會把Some(i) 的 i 值取出，None 過濾掉，然後將數值展開 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.flatten
&lt;span class=&quot;go&quot;&gt;res92: List[Int] = List(1, 2, 4)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;map 搭配 flatten 相當於 flatMap :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.flatMap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res94: List[Int] = List(1, 2, 4)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後透過 sum 算出加總 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.flatten.sum
&lt;span class=&quot;go&quot;&gt;res93: Int = 7

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Option type 感覺可以避免物件回傳 null，至少會是 None 物件，讓我想到一個 design pattern 是 Null Object Pattern，也是會定義一個 null 物件，不讓值直接變成 null，可預防 NullPointerException．&lt;/li&gt;
  &lt;li&gt;Scala 的某些 collection 已經幫我們訂好回傳 Option type 在使用時可注意一下，很多種不同寫法需要再思考．&lt;/li&gt;
  &lt;li&gt;map、flatten、flatMap 感覺會很容易使用到，這邊先提供個例子，有機會再額外介紹．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Option type Option[T] 有兩個物件 Some(x) 與 None．Some(x) 的 x 是指型別為 T 的值，None 是指沒有這個值． 像下面例子，Map 的 get api 定義 : def get(key: K): Option[V] 所以 Map get 回傳的也是 Option 型態，有值會回傳 Some(Int)，沒有的話會回傳 None :</summary></entry><entry><title type="html">Scala day 18 (Map)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day18.html" rel="alternate" type="text/html" title="Scala day 18 (Map)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day18</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day18.html">&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;
&lt;p&gt;Map 的特色是 key / value．有分為 mutable 及 immutable．&lt;/p&gt;

&lt;h4 id=&quot;immutable-的-map&quot;&gt;immutable 的 Map&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val m &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt; -&amp;gt; 1 , &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt; -&amp;gt; 2 , &lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt; -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;m: scala.collection.immutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a2 -&amp;gt; 2, a3 -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;看 Map 的 kyes 及 values :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.keys
&lt;span class=&quot;go&quot;&gt;res163: Iterable[String] = Set(a1, a2, a3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.values
&lt;span class=&quot;go&quot;&gt;res164: Iterable[Int] = MapLike.DefaultValuesIterable(1, 2, 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;取得元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m get &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res167: Option[Int] = Some(2)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res165: Int = 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 contains 判斷 key 是否存在 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m contains &lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res168: Boolean = false

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m contains &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res169: Boolean = true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;getOrElse 取得 key 不存在的話就給參數 2 的值 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val msg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; m getOrElse &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;nodata&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;msg: Any = nodata
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新增元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m + &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a4&quot;&lt;/span&gt; -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res172: scala.collection.immutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a2 -&amp;gt; 2, a3 -&amp;gt; 3, a4 -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m + &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt; -&amp;gt; 5 , &lt;span class=&quot;s2&quot;&gt;&quot;a6&quot;&lt;/span&gt; -&amp;gt; 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res174: scala.collection.immutable.Map[String,Int] = Map(a6 -&amp;gt;&lt;/span&gt; 6, a5 -&amp;gt; 5, a3 -&amp;gt; 3, a1 -&amp;gt; 1, a2 -&amp;gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 ++ 將兩個 Map 相加，並將重複的 key 使用新的 map 代入，a1 原本是 3 會變 33 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nm &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt; -&amp;gt; 33 , &lt;span class=&quot;s2&quot;&gt;&quot;b1&quot;&lt;/span&gt; -&amp;gt; 11 , &lt;span class=&quot;s2&quot;&gt;&quot;b2&quot;&lt;/span&gt; -&amp;gt; 22&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;nm: scala.collection.immutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 33, b1 -&amp;gt; 11, b2 -&amp;gt; 22&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m ++ nm
&lt;span class=&quot;gp&quot;&gt;res179: scala.collection.immutable.Map[String,Int] = Map(b2 -&amp;gt;&lt;/span&gt; 22, b1 -&amp;gt; 11, a3 -&amp;gt; 3, a1 -&amp;gt; 33, a2 -&amp;gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;移除元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m - &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res183: scala.collection.immutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a3 -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m - &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res184: scala.collection.immutable.Map[String,Int] = Map(a2 -&amp;gt;&lt;/span&gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 filterKeys 找到想要的元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m
&lt;span class=&quot;gp&quot;&gt;res196: scala.collection.immutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a2 -&amp;gt; 2, a3 -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.filterKeys&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res197: scala.collection.immutable.Map[String,Int] = Map(a2 -&amp;gt;&lt;/span&gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mutable-的-map&quot;&gt;mutable 的 Map&lt;/h4&gt;
&lt;p&gt;需要 import scala.collection.mutable.Map :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.collection.mutable.Map
&lt;span class=&quot;go&quot;&gt;import scala.collection.mutable.Map

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val im &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt; -&amp;gt; 1 , &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt; -&amp;gt; 2 , &lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt; -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;im: scala.collection.mutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a3 -&amp;gt; 3, a2 -&amp;gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新增元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; im +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a4&quot;&lt;/span&gt; -&amp;gt; 4 , &lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt; -&amp;gt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res191: im.type = Map(a1 -&amp;gt;&lt;/span&gt; 1, a3 -&amp;gt; 3, a5 -&amp;gt; 5, a2 -&amp;gt; 2, a4 -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;移除元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; im -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res192: im.type = Map(a5 -&amp;gt;&lt;/span&gt; 5, a2 -&amp;gt; 2, a4 -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;mutable 的 Map 與 immutable 差異就是 immutable 的不可以變動，所以不能使用 += 或 -= 改變原來的 Map :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:20: error: value -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; is not a member of scala.collection.immutable.Map[String,Int]
&lt;span class=&quot;go&quot;&gt;  Expression does not convert to assignment because receiver is not assignable.
       m -= (&quot;a1&quot;,&quot;a3&quot;)
         ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 ++= 可將新的 Map 加入原來的 Map :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nm &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c1&quot;&lt;/span&gt; -&amp;gt; 11,&lt;span class=&quot;s2&quot;&gt;&quot;c2&quot;&lt;/span&gt; -&amp;gt; 22,&lt;span class=&quot;s2&quot;&gt;&quot;c3&quot;&lt;/span&gt; -&amp;gt; 33&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;nm: scala.collection.mutable.Map[String,Int] = Map(c1 -&amp;gt;&lt;/span&gt; 11, c3 -&amp;gt; 33, c2 -&amp;gt; 22&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; im ++&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; nm
&lt;span class=&quot;gp&quot;&gt;res199: im.type = Map(c1 -&amp;gt;&lt;/span&gt; 11, c3 -&amp;gt; 33, a5 -&amp;gt; 5, a2 -&amp;gt; 2, c2 -&amp;gt; 22, a4 -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看 Map 的 kyes 及 values，這裡的 values 跟 immutable Map 的 return type 不太一樣是 HashMap :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; im.keys
&lt;span class=&quot;go&quot;&gt;res194: Iterable[String] = Set(a5, a2, a4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; im.values
&lt;span class=&quot;go&quot;&gt;res195: Iterable[Int] = HashMap(5, 2, 4)

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;mutable 的 Map 可以使用 clear 清空，immutable 的不行 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; im.clear
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; im
&lt;span class=&quot;go&quot;&gt;res205: scala.collection.mutable.Map[String,Int] = Map()

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.clear
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:20: error: value clear is not a member of scala.collection.immutable.Map[String,Int]
&lt;span class=&quot;go&quot;&gt;       m.clear
         ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Map 的特色是 key / value．有分為 mutable 可改變原來的 Map 及 immutable 不可改變原來的 Map．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Map Map 的特色是 key / value．有分為 mutable 及 immutable．</summary></entry><entry><title type="html">Scala day 17 (Currying)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day17.html" rel="alternate" type="text/html" title="Scala day 17 (Currying)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day17</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day17.html">&lt;h3 id=&quot;curry&quot;&gt;Curry&lt;/h3&gt;
&lt;p&gt;一般函式的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int , num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; num1 + num2
&lt;span class=&quot;go&quot;&gt;sum: (num1: Int, num2: Int)Int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Curry 就是將多個參數的函數變成一個參數的函式再將它們curry起來，Curry 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; num1 + num2
&lt;span class=&quot;go&quot;&gt;sum: (num1: Int)(num2: Int)Int

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res20: Int = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Curry 相當於下面例子，但下面例子可以先呼叫一個參數(val tempSum = sum(1))，再呼叫第二個(tempSum(2)) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num1 + num2
&lt;span class=&quot;gp&quot;&gt;sum: (num1: Int)Int =&amp;gt;&lt;/span&gt; Int
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res21: Int = 3

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val tempSum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;tempSum: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1215&lt;/span&gt;/966153678@59f32d74
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; tempSum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res22: Int = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Curry 需要再後面加上 _ 佔位符符號(placeholder notation)當作第二個參數 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val tempSum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:12: error: not enough arguments &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;method sum: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1: Int, num2: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Int.
&lt;span class=&quot;go&quot;&gt;Unspecified value parameter num2.
       val tempSum = sum(1)
                        ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val tempSum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;_
&lt;span class=&quot;gp&quot;&gt;tempSum: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1221&lt;/span&gt;/1238850480@744b5bd7
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; tempSum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res24: Int = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般函式 _ 的例子 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int , num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; num1 + num2
&lt;span class=&quot;go&quot;&gt;sum: (num1: Int, num2: Int)Int

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val &lt;span class=&quot;nv&quot;&gt;sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 , _:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;sum1: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1231&lt;/span&gt;/433000386@35cc54a7
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res29: Int = 3

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再看一個例子，定義一個 sum 函數，參數一是 lambda expressions(Int =&amp;gt; Int)，參數二 是 Int :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add:Int &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int , num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;sum: (add: Int =&amp;gt;&lt;/span&gt; Int, num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Int
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接著就可以實作不同的 lambda expressions，產出不同算法的結果&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num + 1 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res34: Int = 4

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res35: Int = 8

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ + 1 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res36: Int = 4

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res37: Int = 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;改成 Currying 的寫法，&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add:Int &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;sum: (add: Int =&amp;gt;&lt;/span&gt; Int&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Int
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val &lt;span class=&quot;nb&quot;&gt;times&lt;/span&gt; : Int &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 3
&lt;span class=&quot;gp&quot;&gt;times: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1271&lt;/span&gt;/966830519@75c70563
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 scala function 參數只有一個時，可以用大括號(curly braces) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 5 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res40: Int = 45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在測試看看 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def hello&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + name
&lt;span class=&quot;go&quot;&gt;hello: (name: String)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; hello &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res45: String = Hello Daniel
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可接受任何型態 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def hello &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + _
&lt;span class=&quot;gp&quot;&gt;hello: Any =&amp;gt;&lt;/span&gt; String
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; hello &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res46: String = Hello Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; hello &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;123&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res47: String = Hello 123
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Curry 似乎是 functional programming 很重要的一個觀念，這邊先知道是什麼，之後學習 functional programming 時再來思考 Curry 也許會更有感覺．&lt;/li&gt;
  &lt;li&gt;由於 Curry 是把多個參數拆分成一個一個的參數，所以變成只有一個參數這時候可以使用大括號讓程式看起來更有結構性．例如foldLeft就有運用到，def foldLeft[B](z: B)(f: (B, A) =&amp;gt; B): B ．程式寫起來可使用大括號 : wordsData.foldLeft(0){(sum,tup) =&amp;gt; sum + tup._2}．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Curry 一般函式的寫法 :</summary></entry><entry><title type="html">Scala day 16 (traits self type)</title><link href="http://localhost:4000/scala/2017/12/07/scala_day16.html" rel="alternate" type="text/html" title="Scala day 16 (traits self type)" /><published>2017-12-07T10:44:17+08:00</published><updated>2017-12-07T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/07/scala_day16</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/07/scala_day16.html">&lt;h3 id=&quot;self-types&quot;&gt;Self types&lt;/h3&gt;
&lt;p&gt;Self types 使用的符號是 =&amp;gt;&lt;br /&gt;
Self types 的作用是把不同的 trait 混合(mixed)在一起，並且定義了要 with 它的話，也必須同時具有它 this 的 trait :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Ids &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val id = &quot;ids&quot;
     |  def getId : String
     | }
defined trait Ids

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val name = &quot;names&quot;
     |  def getName : String
     | }
defined trait Names
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this 只能有一個，所以要多個 Self types 要使用 with :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Users &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  this : Ids with Names =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val user = &quot;user&quot;
     |  def getUser : String
     | }
defined trait Users
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定義一個 class 去 extends Users，這時候會出錯，因為使用 Self types 的 trait 等於強迫定義了如果要 with 它時，也一定要 with 它所混合的 trait．
這邊 Users 的 Self types 有 Ids 與 Names，所以類別 Customer 也要 with Ids 與 Names :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,user:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:12: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; self-type Customer does not conform to Users's selftype Users with Ids with Names
       class Customer(id:String,name:String,user:String) extends Users
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果 class 的變數名稱如果與 trait 的變數相同會產生衝突，所以要注意(Ids已有id,Names已有name,Users已有user) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,user:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users with Ids with Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def getId = id
     |  def getName = name
     |  def getUser = user
     | }
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt; requires field but conflicts with value id &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Ids
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                      ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; requires field but conflicts with value name &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Names
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                                ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt; requires field but conflicts with value user &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Users
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                                            ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;把變數名稱改掉 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cid:String,cname:String,cuser:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users with Ids with Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def getId = cid
     |  def getName = cname
     |  def getUser = cuser
     | }
defined class Customer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val cu &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;user1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cu: Customer = Customer@3a62fa79

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; cu.getId
&lt;span class=&quot;go&quot;&gt;res4: String = 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; cu.id
&lt;span class=&quot;go&quot;&gt;res7: String = ids

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;self-types-定義-function&quot;&gt;Self types 定義 function&lt;/h3&gt;
&lt;p&gt;Self types 也可以定義 with 它的類別一定也要具有 Self types 定義好的方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  this : {
     |   def count(mum1:Int,num2:Int): Unit
     |   def getSum: Int
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |  } =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
defined trait Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  this : Counter =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
defined trait MyCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;沒實作方法的話，就會出錯 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class RealCounter extends MyCounter with Counter
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; self-type RealCounter does not conform to Counter's selftype Counter with AnyRef{def count(mum1: Int,num2: Int): Unit;&lt;/span&gt; def getSum: Int&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;       class RealCounter extends MyCounter with Counter
                                                ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再來做個實驗，如果是 abstract class，沒定義的話還是會出錯，但可以不用在 abstract class 實作出方法，可以先定義成抽象方法，就可以過了 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class RealCounter extends MyCounter with Counter
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; self-type RealCounter does not conform to Counter's selftype Counter with AnyRef{def count(mum1: Int,num2: Int): Unit;&lt;/span&gt; def getSum: Int&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;       abstract class RealCounter extends MyCounter with Counter
                                                         ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class RealCounter extends MyCounter with Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def count(num1:Int,num2:Int): Unit
     |  def getSum: Int
     | }
defined class RealCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後還是乖乖實作方法吧 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class RealCounter extends MyCounter with Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  var sum = 0
     |  def count(num1:Int , num2:Int):Unit = sum = num1 + num2
     |  def getSum = sum
     | }
defined class RealCounter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new RealCounter
&lt;span class=&quot;go&quot;&gt;counter: RealCounter = RealCounter@5e585461

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter.getSum
&lt;span class=&quot;go&quot;&gt;res9: Int = 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;trait 本身其實已經是在定義方法及型態了，所以 Self types 概念上好像差不多．差異是不用寫很多 extends 和 with 定義在 this 裡就好．
雖然現在還沒了解它的好處，不過可以先玩玩看．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Self types Self types 使用的符號是 =&amp;gt; Self types 的作用是把不同的 trait 混合(mixed)在一起，並且定義了要 with 它的話，也必須同時具有它 this 的 trait :</summary></entry><entry><title type="html">Scala day 15 (traits &amp;amp; abstract class)</title><link href="http://localhost:4000/scala/2017/12/06/scala_day15.html" rel="alternate" type="text/html" title="Scala day 15 (traits &amp; abstract class)" /><published>2017-12-06T10:44:17+08:00</published><updated>2017-12-06T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/06/scala_day15</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/06/scala_day15.html">&lt;h3 id=&quot;traits-vs-abstract-class&quot;&gt;traits VS abstract class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;抽象類別跟 trait 其實很像，跟 trait 還是有一些差異 :&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;抽象類別只能被單一繼承trait-可以被單一繼承又可以-with-多個&quot;&gt;抽象類別只能被單一繼承，trait 可以被單一繼承又可以 with 多個&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class A
&lt;span class=&quot;go&quot;&gt;defined class A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class B
&lt;span class=&quot;go&quot;&gt;defined class B

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C extends A
&lt;span class=&quot;go&quot;&gt;defined class C


&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait A
&lt;span class=&quot;go&quot;&gt;defined trait A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait B
&lt;span class=&quot;go&quot;&gt;defined trait B

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C extends A with B
&lt;span class=&quot;go&quot;&gt;defined class C
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;記得使用 with trait 要先 extends 才可以&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C with A with B
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt; expected but &lt;span class=&quot;s1&quot;&gt;'with'&lt;/span&gt; found.
&lt;span class=&quot;go&quot;&gt;       class C with A with B
               ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;抽象類別有建構子trait-沒有&quot;&gt;抽象類別有建構子，trait 沒有&lt;/h4&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;cala&amp;gt;&lt;/span&gt; abstract class Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class Employee

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: traits or objects may not have parameters
&lt;span class=&quot;go&quot;&gt;       trait Employee(id:String,name:String)
                     ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;抽象類別的-super-vs-trait-的-super&quot;&gt;抽象類別的 super VS trait 的 super&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;抽象類別的super是靜態呼叫父類別的方法，trait 是由於可以 with 多個所以 super 是動態的無法知道是哪個父類別，只有在建立類別時才會知道．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;抽象類別的 super :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def count(num1: Int , num2: Int) : Unit
     | }
defined class Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyCounter extends Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  var sum = 0
     |  def count(num1: Int , num2: Int): Unit = sum = num1 + num2
     |  def getSum = sum
     | }
defined class MyCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;trait 的 super 由於是動態的所以 with 的順序不同會影響 super 最後的結果，所以又稱 stackable modifications (堆疊修飾) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   def count(num1: Int , num2: Int) : Unit
     | }
defined class Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyCounter extends Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   var sum = 0
     |   def count(num1: Int , num2: Int): Unit = sum = num1 * num2
     |   def getSum = sum
     | }
defined class MyCounter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Counter1 extends MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   abstract override def count(num1:Int , num2:Int) = {
     |     if(num1 &amp;lt; 0 || num2 &amp;lt; 0) {
     |       super.count(num1,num2)
     |     } else {
     |       sum = num1 + num2
     |     }
     |   }
     | }
defined trait Counter1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Filter1 extends MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   abstract override def count(num1:Int , num2:Int) = {
     |     if(num1 &amp;lt; 0 || num2 &amp;lt; 0) {
     |       super.count(num1,num2)
     |     } else {
     |       sum = num1 + num2 * 2
     |     }
     |   }
     | }
defined trait Filter1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;stackable modifications 會從最右邊開始，例如下面 coutner1 這個物件，
Filter1 的 super 會呼叫 Counter1 的 method ，Counter1 的 super 會呼叫 MyCounter 的 method :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new MyCounter with Counter1 with Filter1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;counter1: MyCounter with Counter1 with Filter1 = $&lt;/span&gt;anon&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;@a5e8260
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.sum
&lt;span class=&quot;go&quot;&gt;res1: Int = 5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.sum
&lt;span class=&quot;go&quot;&gt;res3: Int = -10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;counter2 這個物件，Counter1 的 super 會呼叫 Filter1 的 method ，Filter1 的 super 會呼叫 MyCounter 的 method :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new MyCounter with Filter1 with Counter1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;counter2: MyCounter with Filter1 with Counter1 = $&lt;/span&gt;anon&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;@167bb934
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.sum
&lt;span class=&quot;go&quot;&gt;res7: Int = 3

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.sum
&lt;span class=&quot;go&quot;&gt;res9: Int = -2

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala trait 的功能跟 abstract class 差不多，但我覺得 trait 可以多重繼承跟實作具體的方法就比 abstract class 好用很多了．
感覺像是 java interface 的加強版．雖然抽象類別有建構子可以初始化參數，但其實 trait 也可以提供方法傳遞即可．scala 提供了許多 java 額外的東西，
所以寫法更豐富，或許這也是其中一種理由讓它可以實作OOP(物件導向)也可以實作FP(函數式)．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">traits VS abstract class 抽象類別跟 trait 其實很像，跟 trait 還是有一些差異 :</summary></entry></feed>