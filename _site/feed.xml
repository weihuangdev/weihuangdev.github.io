<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-04T15:40:13+08:00</updated><id>http://localhost:4000/</id><title type="html">Daniel’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">RabbitMQ day 1 (install)</title><link href="http://localhost:4000/rabbitmq/2018/01/04/rabbitmq_day1.html" rel="alternate" type="text/html" title="RabbitMQ day 1 (install)" /><published>2018-01-04T10:44:17+08:00</published><updated>2018-01-04T10:44:17+08:00</updated><id>http://localhost:4000/rabbitmq/2018/01/04/rabbitmq_day1</id><content type="html" xml:base="http://localhost:4000/rabbitmq/2018/01/04/rabbitmq_day1.html">&lt;h3 id=&quot;rabbitmq-安裝&quot;&gt;RabbitMQ 安裝&lt;/h3&gt;
&lt;p&gt;這邊使用的是 CentOS-6.8 安裝 rabbitmq． 
安裝 rabbitmq 前要先安裝 erlang，安裝指令步驟 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;yum install epel-release (安裝epel擴充資源庫)&lt;/li&gt;
  &lt;li&gt;yum install erlang&lt;/li&gt;
  &lt;li&gt;確認 erlang 版本指令 : erl -version&lt;/li&gt;
  &lt;li&gt;yum install rabbitmq-server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;預設開機要啟動 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;chkconfig rabbitmq-server on
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;啟動 rabbitmq server :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;service rabbitmq-server start
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;查看 rabbitmq server 狀態 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;service rabbitmq-server status
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;停止 rabbitmq server :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;service rabbitmq-server stop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;安裝-web-管理介面&quot;&gt;安裝 web 管理介面&lt;/h3&gt;
&lt;p&gt;到 /usr/lib/rabbitmq/lib/rabbitmq_server-3.1.5/sbin 底下執行 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;./rabbitmq-plugins enable rabbitmq_management
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;重啟 rabbitmq server 後，輸入網址 http://localhost:15672，帳密都使用 guest 登入．
&lt;img src=&quot;http://localhost:4000/assets/rabbitmq_day1_1.jpg&quot; alt=&quot;rabbitmq_day1_1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;補充&quot;&gt;補充&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看 yum 目前 repositories
yum repolist&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查詢 Centos 版本
cat /etc/redhat-release //查詢 Centos 版本&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">RabbitMQ 安裝 這邊使用的是 CentOS-6.8 安裝 rabbitmq． 安裝 rabbitmq 前要先安裝 erlang，安裝指令步驟 :</summary></entry><entry><title type="html">Scala day 30 (Functional Programming)</title><link href="http://localhost:4000/scala/2017/12/30/scala_day30.html" rel="alternate" type="text/html" title="Scala day 30 (Functional Programming)" /><published>2017-12-30T10:44:17+08:00</published><updated>2017-12-30T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/30/scala_day30</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/30/scala_day30.html">&lt;h3 id=&quot;functional-programming&quot;&gt;Functional Programming&lt;/h3&gt;
&lt;p&gt;今天是鐵人賽的最後一天，就來聊聊第一天說到的 scala 可以 Functional Programming 吧．Functional Programming 其實之前就已存在了，但為什麼最近又開始紅了起來了呢？
我覺得是因為大數據、machine learning、AI 等…技術越來越受到重視，而這些需要大量運算的環境下，無法只靠單執行緒處理運算． 所以才會使用多執行緒、分散式運算、平行處理等來增加處理資料的速度．但使用這些技術解決運算速度問題的同時，也衍生出其他的問題．．而 Functional Programming 是很適合用來解決這些問題，所以也越來越受到重視．
接著先介紹兩個蠻重要的觀念是Concurrency(並行)以及Parallelism(平行)．&lt;/p&gt;

&lt;h4 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h4&gt;
&lt;p&gt;多個任務在一個 CPU(core) 上面執行，在時間內交互執行，會以為是同時處理多個工作．(multitasking on a single-core machine)．&lt;/p&gt;

&lt;h4 id=&quot;parallelism&quot;&gt;Parallelism&lt;/h4&gt;
&lt;p&gt;多個任務在多個 CPU(cores) 上面同時執行，同時處理多個工作．(tasks run at the same time on a multicore processor)．&lt;/p&gt;

&lt;p&gt;那面對 Concurrency 以及 Parallelism 的環境時．Imperative programming(C、C++、Java、Pythin) 在處理這些問題上就會顯得非常複雜．像 java 要寫 multi-thread 的程式時就要很小心，而且要避免一些問題，例如:deadlock．
有很多共用變數或方法的地方又要加上 synchronize．所以光是處理這些問題就很令人頭痛，那會變成那麼複雜有一個很大的原因就是因為 Imperative programming 用到的變數幾乎都是 mutable 的．mutable 的變數代表它的值可以被改變、而且也可以被重新定義．那在 Concurrency 或 Parallelism 執行上，你無法確定 state 的狀況是什麼．這時候 immutable 及 pure function  的好處出來了，你不用擔心變數或function 在哪邊被重新定義了，因為 immutable 不可以被改變．所以 scala 的 collection 有 mutable 及 immutable．&lt;/p&gt;

&lt;h4 id=&quot;functional-programming-要點&quot;&gt;Functional Programming 要點&lt;/h4&gt;
&lt;p&gt;開發程式時，幾乎都使用 pure functions，程式裡只使用 immutable values (scala 的 val)．&lt;/p&gt;

&lt;h4 id=&quot;pure-functions&quot;&gt;Pure functions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;pure function 的結果，只依賴於輸入的參數及內部算法&lt;/li&gt;
  &lt;li&gt;pure function 不會有 side effects(副作用)，它不會讀取外部的東西，及寫入外部東西&lt;/li&gt;
  &lt;li&gt;根據上面兩個性質來看，pure function 傳入的參數(假設是 x)，不管呼叫幾次結果都會是一樣的(y)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;p&gt;Imperative 的寫法(use var &amp;amp; for) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;def sum(nums: List[Int]): Int = {
  var sum = 0
  for (i &amp;lt;- nums) {
    sum += i }
  sum
}

val lst = List(1,2,3)
sum(lst) // Int = 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Functional 的寫法(use match &amp;amp; recursion) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;def sums(xs: List[Int]): Int = xs match {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  case Nil =&amp;gt;&lt;/span&gt; 0
&lt;span class=&quot;gp&quot;&gt;  case x :: tail =&amp;gt;&lt;/span&gt; x + sums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tail&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;}
sums(lst) // Int = 6

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Imperative 的寫法(use mutable collection &amp;amp; for) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;def double(ints: List[Int]): List[Int] = {
  val buffer = new scala.collection.mutable.ListBuffer[Int]()
  for (i &amp;lt;- ints) {
    buffer += i * 2
  }
  buffer.toList
}
val oldNumbers = List(1,2,3)
val newNumbers = double(oldNumbers) // List(2, 4, 6)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Functional 的寫法(use Higher Order Function(map)) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;val oldNumbers = List(1,2,3)
val newNumbers = oldNumbers.map(_ * 2) // List(2, 4, 6)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Functional Programming 也是另一門很深奧的學問，尤其 OOP 寫久了之後，可能一時會轉不過來，這邊只是稍微跟大家提一下
而已，有興趣的話大家再研究一下吧．&lt;/li&gt;
  &lt;li&gt;在這 30 天介紹了許多 scala 的特色，也在最後一天也跟大家稍微介紹了一下FP．但其實還有許許多多的學問需要研究．我覺得會java的人，很值得也學習一下 scala 這個語言，可以激發出更多不一樣的想法不管是 OOP 或是 FP．鐵人賽結束了，希望這些文章能讓大家有一點點收穫，繼續前進 scala 的世界吧～加油！&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Functional Programming 今天是鐵人賽的最後一天，就來聊聊第一天說到的 scala 可以 Functional Programming 吧．Functional Programming 其實之前就已存在了，但為什麼最近又開始紅了起來了呢？ 我覺得是因為大數據、machine learning、AI 等…技術越來越受到重視，而這些需要大量運算的環境下，無法只靠單執行緒處理運算． 所以才會使用多執行緒、分散式運算、平行處理等來增加處理資料的速度．但使用這些技術解決運算速度問題的同時，也衍生出其他的問題．．而 Functional Programming 是很適合用來解決這些問題，所以也越來越受到重視． 接著先介紹兩個蠻重要的觀念是Concurrency(並行)以及Parallelism(平行)．</summary></entry><entry><title type="html">Scala day 29 (some collection method)</title><link href="http://localhost:4000/scala/2017/12/28/scala_day29.html" rel="alternate" type="text/html" title="Scala day 29 (some collection method)" /><published>2017-12-28T10:44:17+08:00</published><updated>2017-12-28T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/28/scala_day29</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/28/scala_day29.html">&lt;h3 id=&quot;map&quot;&gt;map&lt;/h3&gt;
&lt;p&gt;對 collection 每個元素個別處理 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val lst &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Apple&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Mac&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Taipei&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Banana&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;scala&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lst: List[String] = List(Daniel, Apple, Mac, Taipei, Jack, Hello world, Banana, scala)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; name.length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res16: List[Int] = List(6, 5, 3, 6, 4, 11, 6, 5)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res15: List[Int] = List(6, 5, 3, 6, 4, 11, 6, 5)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reduce&quot;&gt;reduce&lt;/h3&gt;
&lt;p&gt;將 collection 的元素收集處理，第一次先處理兩個元素，產生的解果再跟下個元素處理，最後回傳跟元素一樣型態的值 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.reduce&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;num1:Int,num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num1 + num2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res17: Int = 46

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; name.length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res16: List[Int] = List(6, 5, 3, 6, 4, 11, 6, 5)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;flatten&quot;&gt;flatten&lt;/h3&gt;
&lt;p&gt;flatten 可以將 collection 裡的 collections 轉換成一個 collection :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val lst &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3,4,List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5,6&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lst: List[List[Any]] = List(List(1, 2), List(3, 4, List(5, 6)))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.flatten
&lt;span class=&quot;go&quot;&gt;res26: List[Any] = List(1, 2, 3, 4, List(5, 6))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;flatmap&quot;&gt;flatMap&lt;/h3&gt;
&lt;p&gt;flatMap 會先執行 map 之後再處理 flatten，相當於兩個的結合 :&lt;br /&gt;
下面例子會先對 List 裡的 每個 List 做 distinct，再 flatten 成一個 collection :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val lst &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5,3,4,1,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,4,6,7&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lst: List[List[Int]] = List(List(1, 2, 1, 2), List(5, 3, 4, 1, 5), List(2, 4, 6, 7))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.flatMap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.distinct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res33: List[Int] = List(1, 2, 5, 3, 4, 1, 2, 4, 6, 7)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.distinct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.flatten
&lt;span class=&quot;go&quot;&gt;res34: List[Int] = List(1, 2, 5, 3, 4, 1, 2, 4, 6, 7)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;distinct&quot;&gt;distinct&lt;/h3&gt;
&lt;p&gt;distinct 可將重複的元素變成一個 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val lst &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3,4,1,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,4,6,7&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lst: List[List[Int]] = List(List(1, 2), List(3, 4, 1, 5), List(2, 4, 6, 7))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.flatten.distinct
&lt;span class=&quot;go&quot;&gt;res27: List[Int] = List(1, 2, 3, 4, 5, 6, 7)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sortwith&quot;&gt;sortWith&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.sortWith&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &amp;lt; _&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res20: List[String] = List(Apple, Banana, Daniel, Hello world, Jack, Mac, Taipei, scala)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.sortWith&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; _&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res21: List[String] = List(scala, Taipei, Mac, Jack, Hello world, Daniel, Banana, Apple)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;optionmapflatmapsum-&quot;&gt;Option、map、flatMap、sum :&lt;/h3&gt;
&lt;p&gt;在介紹 List 的時候有先介紹過這範例，不過這邊再來複習一次，會比較有感覺．
定義一個 function 將 String 轉成 Option[Int] 的 type :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def toInt&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s: String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Option[Int] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   try {
     |     Some(Integer.parseInt(s.trim))
     |   } catch {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |     case e: Exception =&amp;gt;&lt;/span&gt; None
&lt;span class=&quot;go&quot;&gt;     |   }
     | }
toInt: (s: String)Option[Int]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然後定義一組有數字及文字的 Seq[String] 的 collection，然後透過 map 對裡面每個元素做上面定義的 toInt 方法，
可以轉成 Int 的會回傳 Some(Int) 不行的回傳 None&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val strings &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Seq&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;strings: Seq[String] = List(1, 2, foo, 3, bar)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; strings.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;toInt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res35: Seq[Option[Int]] = List(Some(1), Some(2), None, Some(3), None)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這時候透過 flatMap 展開後，None 物件會被過濾掉，而 Some(Int) 會轉成 Int :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; strings.flatMap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;toInt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res36: Seq[Int] = List(1, 2, 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後透過 sum 將元素的值做加總 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; strings.flatMap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;toInt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.sum
&lt;span class=&quot;go&quot;&gt;res37: Int = 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fold&quot;&gt;fold&lt;/h3&gt;
&lt;p&gt;fold 有兩個參數，第一個是代初始值，第二的是 lambda expressions 就是元素要處理的事 :&lt;br /&gt;
下面例子初始值是 0，然後執行順序參考下面 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val numbers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5, 4, 8, 6, 2, 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;numbers: List[Int] = List(5, 4, 8, 6, 2, 3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers.fold&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;z, i&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   println(z + &quot; , &quot; + i)
     |   z + i
     | }
0 , 5 //初始值 0 跟 第一個元素 5 相加
5 , 4 //(0 + 5) 上一個的結果跟下個元素 4 做相加
9 , 8 //上一個的結果(9)跟下個元素 4 做相加，以此類推...
17 , 6
23 , 2
25 , 3
res38: Int = 28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;fold 之外還有另外兩個 foldLeft、foldRight，foldLeft 是從左邊開始，foldLeft 是從右邊開始，fold 順序不一定 :&lt;br /&gt;
foldLeft 範例，初始參數改成 1，從左邊開始加&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val numbers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5, 4, 8, 6, 2, 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;numbers: List[Int] = List(5, 4, 8, 6, 2, 3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers.foldLeft&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;z, i&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   println(z + &quot; , &quot; + i)
     |   z + i
     | }
1 , 5 //初始值 1 跟左邊第一個元素 5 相加
6 , 4 //(1 + 5) 上一個的結果 6 跟左邊第二個元素 4 作相加...
10 , 8
18 , 6
24 , 2
26 , 3
res45: Int = 29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;foldRight 範例，初始參數改成 2，從右邊開始加 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers.foldRight&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;z, i&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   println(z + &quot; , &quot; + i)
     |   z + i
     | }
3 , 2 //初始值 2 跟右邊第一個元素 3 相加
2 , 5 //(2 + 3) 上一個的結果 5 跟右邊第二個元素 2 作相加...
6 , 7
8 , 13
4 , 21
5 , 25
res46: Int = 30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後試著了解這段 code 吧 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val lst &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Apple&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Mac&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Taipei&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Banana&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;scala&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lst: List[String] = List(Daniel, Apple, Mac, Taipei, Jack, Hello world, Banana, scala)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.filter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.foldLeft&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List.empty[Int]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   (s,ele) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s.contains&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ele&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ele&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s :+ ele&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }.reduce(_ + _)
res47: Int = 11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala collection 提供非常多的 api，這邊只是先列幾個範例，可以再多找些資訊學習．&lt;/li&gt;
  &lt;li&gt;上述 Code 解析 :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; lst.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; // 將每個元素轉成該元素的長度，然後產生一組新的 List[Int]
&lt;span class=&quot;go&quot;&gt;res48: List[Int] = List(6, 5, 3, 6, 4, 11, 6, 5)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 5, 3, 6, 4, 11, 6, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.filter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res49: List[Int] = List(6, 5, 6, 11, 6, 5) // 透過 filter 只取得 &amp;gt;&lt;/span&gt; 4 的元素，再產生一組新的 List[Int]
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 5, 6, 11, 6, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.foldLeft&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List.empty[Int]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   (s,ele) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s.contains&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ele&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ele&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s :+ ele&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | } // 透過 foldLeft 初始值參數是一個空的 List 也就是(s)，然後判斷左邊第一個元素 6，是否包含在 s 裡，不在就加入回傳新的 List，否則就不加入回傳原來的 List．可去除重複的元素，也可用 distinct．
res50: List[Int] = List(6, 5)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.reduce&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ + _&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; //接著透過 reduce 將每個元素做相加回傳跟元素一樣的type Int
&lt;span class=&quot;go&quot;&gt;res51: Int = 11

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.sum //使用 sum 將元素做加總
&lt;span class=&quot;go&quot;&gt;res52: Int = 11

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">map 對 collection 每個元素個別處理 :</summary></entry><entry><title type="html">Scala day 28 (json)</title><link href="http://localhost:4000/scala/2017/12/28/scala_day28.html" rel="alternate" type="text/html" title="Scala day 28 (json)" /><published>2017-12-28T10:44:17+08:00</published><updated>2017-12-28T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/28/scala_day28</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/28/scala_day28.html">&lt;h3 id=&quot;lift-json&quot;&gt;lift-json&lt;/h3&gt;
&lt;p&gt;使用 lift-json 的套件(lift-json_2.12-3.1.1.jar)，來對 json 格式資料做處理 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; :require lift-json_2.12-3.1.1.jar
&lt;span class=&quot;go&quot;&gt;Added '/Volumes/Transcend/scala-test/lift-json_2.12-3.1.1.jar' to classpath.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; :require paranamer-2.8.jar
&lt;span class=&quot;go&quot;&gt;Added '/Volumes/Transcend/scala-test/paranamer-2.8.jar' to classpath.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;需 import 下列兩個套件 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import net.liftweb.json._
&lt;span class=&quot;go&quot;&gt;import net.liftweb.json._

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import net.liftweb.json.Serialization.write
&lt;span class=&quot;go&quot;&gt;import net.liftweb.json.Serialization.write
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;需加上 implicit val formats = DefaultFormats&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Address&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;city: String, state: String&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class Address

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Person&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name: String, address: Address&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class Person

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; implicit val formats &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; DefaultFormats
&lt;span class=&quot;gp&quot;&gt;formats: net.liftweb.json.DefaultFormats.type = net.liftweb.json.DefaultFormats$&lt;/span&gt;@ac417a2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;將物件轉成 json 格式 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val p &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Person&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;, Address&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Taipei&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;p: Person = Person(Daniel,Address(Daniel,Taipei))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val jsonString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; write&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jsonString: String = {&quot;name&quot;:&quot;Daniel&quot;,&quot;address&quot;:{&quot;city&quot;:&quot;Daniel&quot;,&quot;state&quot;:&quot;Taipei&quot;}}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;將 json string 轉成 object :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; parse&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot; { &quot;&lt;/span&gt;numbers&lt;span class=&quot;s2&quot;&gt;&quot; : [1, 2, 3, 4] } &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res0: net.liftweb.json.JValue = JObject(List(JField(numbers,JArray(List(JInt(1), JInt(2), JInt(3), JInt(4))))))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;轉成自訂義的物件(MyNumbers) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class MyNumbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;numbers: Array[Int]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class MyNumbers

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val jvalue &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parse&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot; { &quot;&lt;/span&gt;numbers&lt;span class=&quot;s2&quot;&gt;&quot; : [1, 2, 3, 4] } &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jvalue: net.liftweb.json.JValue = JObject(List(JField(numbers,JArray(List(JInt(1), JInt(2), JInt(3), JInt(4))))))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val myNum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; jvalue.extract[MyNumbers]
&lt;span class=&quot;go&quot;&gt;myNum: MyNumbers = MyNumbers([I@539fe2b8)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num &amp;lt;- myNum.numbers&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1
2
3
4

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 DSL 做轉換 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import net.liftweb.json.JsonDSL._
&lt;span class=&quot;go&quot;&gt;import net.liftweb.json.JsonDSL._

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val json &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 2, 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;json: List[Int] = List(1, 2, 3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; compact&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;render&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:21: warning: method compact &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;package json is deprecated &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;since 3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Please switch to using compactRender instead.
&lt;span class=&quot;go&quot;&gt;       compact(render(json))
       ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:21: warning: method render &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;package json is deprecated &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;since 3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Please switch to using prettyRender or compactRender instead.
&lt;span class=&quot;go&quot;&gt;       compact(render(json))
               ^
res1: String = [1,2,3]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;compact(render(json)) 的方式已經被 deprecated，所以改用 compactRender．&lt;br /&gt;
Tuple2 轉 json :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val json &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;joe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;json: (String, String) = (name,joe)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; compactRender&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res3: String = {&quot;name&quot;:&quot;joe&quot;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 ~ 符號 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val json &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;joe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ~ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt; -&amp;gt; 35&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ~ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tel&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;12345&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;json: net.liftweb.json.JsonAST.JObject = JObject(List(JField(name,JString(joe)), JField(age,JInt(35)), JField(tel,JString(12345))))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; compactRender&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res4: String = {&quot;name&quot;:&quot;joe&quot;,&quot;age&quot;:35,&quot;tel&quot;:&quot;12345&quot;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;型態如果是 Option ，None 物件就不會轉了 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val json &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;joe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ~ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt; -&amp;gt; Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;json: net.liftweb.json.JsonAST.JObject = JObject(List(JField(name,JString(joe)), JField(age,JInt(35))))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; compactRender&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res5: String = {&quot;name&quot;:&quot;joe&quot;,&quot;age&quot;:35}

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val json &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;joe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ~ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;None:Option[Int]&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;json: net.liftweb.json.JsonAST.JObject = JObject(List(JField(name,JString(joe)), JField(age,JNothing)))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; compactRender&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res7: String = {&quot;name&quot;:&quot;joe&quot;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 處理 json 時還有其他選項，例如 json4s-jackson 或 json4s-native，json4s-jackson 與 json4s-native 的差異是 jackson 包含了大部分 jackson-module-scala 的功能，也可以使用 lift-json 下的所有功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;參考資料&quot;&gt;參考資料&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;lift-json : https://github.com/lift/lift/tree/master/framework/lift-base/lift-json&lt;/p&gt;</content><author><name></name></author><summary type="html">lift-json 使用 lift-json 的套件(lift-json_2.12-3.1.1.jar)，來對 json 格式資料做處理 :</summary></entry><entry><title type="html">Scala day 27 (Write Files)</title><link href="http://localhost:4000/scala/2017/12/27/scala_day27.html" rel="alternate" type="text/html" title="Scala day 27 (Write Files)" /><published>2017-12-27T10:44:17+08:00</published><updated>2017-12-27T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/27/scala_day27</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/27/scala_day27.html">&lt;h3 id=&quot;write-file&quot;&gt;Write file&lt;/h3&gt;
&lt;p&gt;使用 java io 的 package，來建立檔案 : 
用 PrintWriter&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import java.io._
&lt;span class=&quot;go&quot;&gt;import java.io._

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val pw &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new PrintWriter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new File&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Volumes/Transcend/scala-test/b.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;pw: java.io.PrintWriter = java.io.PrintWriter@1ee11117

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; pw.write&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;您好&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; pw.close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用 FileWriter&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;val file = new File(&quot;/Volumes/Transcend/scala-test/c.txt&quot;)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new File&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Volumes/Transcend/scala-test/c.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;file: java.io.File = /Volumes/Transcend/scala-test/c.txt

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val bw &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new BufferedWriter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new FileWriter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;bw: java.io.BufferedWriter = java.io.BufferedWriter@577953cb

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bw.write&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello 您好啊&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bw.close&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用第三方元件-better-files-&quot;&gt;使用第三方元件 better-files :&lt;/h3&gt;
&lt;p&gt;下載 better-files 的 jar (這邊用 better-files_2.12-3.4.0.jar)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; :require better-files_2.12-3.4.0.jar
&lt;span class=&quot;go&quot;&gt;Added '/Volumes/Transcend/scala-test/better-files_2.12-3.4.0.jar' to classpath.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;import better.files :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import better.files._
&lt;span class=&quot;go&quot;&gt;import better.files._

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import java.io.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;File &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; JFile&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;import java.io.{File=&amp;gt;&lt;/span&gt;JFile&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; file&lt;span class=&quot;s2&quot;&gt;&quot;/Volumes/Transcend/scala-test/d.txt&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;file: better.files.File = /Volumes/Transcend/scala-test/d.txt

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; file.overwrite&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res17: file.type = /Volumes/Transcend/scala-test/d.txt

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; file.appendLine&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;.append&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res18: file.type = /Volumes/Transcend/scala-test/d.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 symbol 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import better.files.Dsl.SymbolicOperations
&lt;span class=&quot;go&quot;&gt;import better.files.Dsl.SymbolicOperations

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.language.existentials
&lt;span class=&quot;go&quot;&gt;import scala.language.existentials

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt; 用來覆寫檔案，&amp;lt;&amp;lt; 用來新增一行及內容 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; file &amp;lt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res26: qual$&lt;/span&gt;1.file.type forSome &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; val qual&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;: better.files.Dsl.SymbolicOperations &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Volumes/Transcend/scala-test/d.txt
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; file &amp;lt;&amp;lt; &lt;span class=&quot;s2&quot;&gt;&quot; Daniel&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res27: qual$&lt;/span&gt;1.file.type forSome &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; val qual&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;: better.files.Dsl.SymbolicOperations &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Volumes/Transcend/scala-test/d.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;換個寫法也可以 : 
 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;:&lt;/code&gt; 用來覆寫檔案，»: 用來新增一行及內容&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;cala&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Scala&quot;&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; file
&lt;span class=&quot;gp&quot;&gt;res29: qual$&lt;/span&gt;1.file.type forSome &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; val qual&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;: better.files.Dsl.SymbolicOperations &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Volumes/Transcend/scala-test/d.txt
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Test&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;: file
&lt;span class=&quot;gp&quot;&gt;res31: qual$&lt;/span&gt;1.file.type forSome &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; val qual&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;: better.files.Dsl.SymbolicOperations &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Volumes/Transcend/scala-test/d.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;better-files 還有許多功能，詳細寫法可以參考下面網址．&lt;/p&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 io 目前好像比較偏向使用 java io 或著 better files 第三方元件，未來不知道本身會不會提供．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;參考資料&quot;&gt;參考資料&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;better file : https://github.com/pathikrit/better-files&lt;/p&gt;</content><author><name></name></author><summary type="html">Write file 使用 java io 的 package，來建立檔案 : 用 PrintWriter</summary></entry><entry><title type="html">Scala day 26 (Read Files)</title><link href="http://localhost:4000/scala/2017/12/26/scala_day26.html" rel="alternate" type="text/html" title="Scala day 26 (Read Files)" /><published>2017-12-26T10:44:17+08:00</published><updated>2017-12-26T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/26/scala_day26</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/26/scala_day26.html">&lt;h3 id=&quot;read-file&quot;&gt;Read file&lt;/h3&gt;
&lt;p&gt;建立一個 a.txt，內容為 :&lt;br /&gt;
12345&lt;br /&gt;
abcde&lt;br /&gt;
~*_+=&lt;br /&gt;
您好&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;使用 scala.io.Source 套件 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.io.Source
&lt;span class=&quot;go&quot;&gt;import scala.io.Source

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val fileName &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Volumes/Transcend/scala-test/a.txt&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;fileName: String = /Volumes/Transcend/scala-test/a.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;透過 Source.fromFile 一行一行讀取 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;line &amp;lt;- Source.fromFile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.getLines&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  println(line)
     | }
12345
abcde
~*_+=
您好
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以把每一行的內容裝到一個 collection 裡 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val lines &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Source.fromFile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.getLines.toList
&lt;span class=&quot;go&quot;&gt;lines: List[String] = List(12345, abcde, ~*_+=, 您好)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;透過 mkString 將每行資料用其他符號做分隔(“,”) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val lines &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Source.fromFile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.getLines.mkString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lines: String = 12345,abcde,~*_+=,您好
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上述的寫法檔案並不會 close，使用 lsof 查看 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;daniel@Danielde-MacBook-Pro &amp;gt;&lt;/span&gt; lsof | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a.txt'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;java      88789 daniel   39r      REG                1,6         25  127247 /Volumes/Transcend/scala-test/a.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以最後還是要加上 close 比較好 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val bufferedSource &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Source.fromFile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Volumes/Transcend/scala-test/a.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;bufferedSource: scala.io.BufferedSource = non-empty iterator

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;line &amp;lt;- bufferedSource.getLines&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |     println(line.toUpperCase)
     | }
12345
ABCDE
~*_+=
您好

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bufferedSource.close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 Loan Pattern 實作自動 close file 的方式，類似 java 1.7 版本以後的 try-with-resource statement 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Control &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   def using[A &amp;lt;: { def close(): Unit }, B](resource: A)(f: A =&amp;gt;&lt;/span&gt; B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: B &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |     try {
     |       f(resource)
     |     } finally {
     |       resource.close()
     |     }
     | }
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:16: warning: reflective access of structural &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;member method close should be enabled
&lt;span class=&quot;go&quot;&gt;by making the implicit value scala.language.reflectiveCalls visible.
This can be achieved by adding the import clause 'import scala.language.reflectiveCalls'
or by setting the compiler option -language:reflectiveCalls.
See the Scaladoc for value scala.language.reflectiveCalls for a discussion
why the feature should be explicitly enabled.
             resource.close()
                      ^
defined object Control
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這邊也運用到了 Curry 的寫法，只不過第二個參數是用 {}，最後將結果 B 回傳 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Control.using&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;io.Source.fromFile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Volumes/Transcend/scala-test/a.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  source =&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   for (line &amp;lt;- source.getLines) {
     |     println(line)
     |   }
     |  }
     | }
12345
abcde
~*_+=
您好

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 io 也可以搭配 java 的 io 使用，例如 Java FileReader and BufferedReader classes 等．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Read file 建立一個 a.txt，內容為 : 12345 abcde ~*_+= 您好</summary></entry><entry><title type="html">Scala day 25 (Bounds)</title><link href="http://localhost:4000/scala/2017/12/23/scala_day25.html" rel="alternate" type="text/html" title="Scala day 25 (Bounds)" /><published>2017-12-23T10:44:17+08:00</published><updated>2017-12-23T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/23/scala_day25</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/23/scala_day25.html">&lt;h3 id=&quot;bounds&quot;&gt;Bounds&lt;/h3&gt;

&lt;h4 id=&quot;a--b-upper-bound&quot;&gt;A &amp;lt;: B Upper bound&lt;/h4&gt;
&lt;p&gt;再了解 Upper bound 之前也先來定義一些類別 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;trait OntheRoad

trait LikeFish

abstract class Animal {
  def name: String
}

class Cat(catName: String) extends Animal with OntheRoad with LikeFish {
  def name = catName
}

class MexCat(MexCatName: String) extends Cat(MexCatName) {
  override def name = MexCatName
}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這次定義除了用 Invariant 再加上了 Upper bound，代表 A 這類別上界是 Cat，不能再往上了(最初的父類別要是 Cat)．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class InvariantClass[A &amp;lt;: Cat]
&lt;span class=&quot;go&quot;&gt;defined class InvariantClass
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以 Cat 及 MexCat 都會成功，Animal 會失敗 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[Cat]
&lt;span class=&quot;go&quot;&gt;res0: InvariantClass[Cat] = InvariantClass@2248d140

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[MexCat]
&lt;span class=&quot;go&quot;&gt;res1: InvariantClass[MexCat] = InvariantClass@5f82209e

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[Animal]
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Animal] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;lt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       val res2 =
           ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Animal] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;lt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       new InvariantClass[Animal]
           ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再定義一個 Dog 類別，這時候雖然是 InvariantClass 但由於已經定義了 Upper bound 是 Cat，所以 Dog 會出錯 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Dog
&lt;span class=&quot;go&quot;&gt;defined class Dog

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[Dog]
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Dog] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;lt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       val res3 =
           ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Dog] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;lt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       new InvariantClass[Dog]
           ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;a--b-lower-bound&quot;&gt;A &amp;gt;: B Lower bound&lt;/h4&gt;
&lt;p&gt;這次換用 Invariant 加上了 Lower bound，代表 A 這類別下界是 Cat，不能再往下了(最後的子類別是 Cat)．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class InvariantClass[A &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;: Cat]
&lt;span class=&quot;go&quot;&gt;defined class InvariantClass
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以 Cat 的子類別 MexCat 就會失敗，而至於 Animal、OntheRoad、LikeFish 的會成功，而 Dog 跟 Cat 目前毫無關係所以繼續失敗．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[Cat]
&lt;span class=&quot;go&quot;&gt;res4: InvariantClass[Cat] = InvariantClass@56820446

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[MexCat]
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MexCat] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;gt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       val res5 =
           ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MexCat] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;gt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       new InvariantClass[MexCat]
           ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[Animal]
&lt;span class=&quot;go&quot;&gt;res6: InvariantClass[Animal] = InvariantClass@28f3a218

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[Dog]
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Dog] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;gt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       val res7 =
           ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;arguments &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Dog] &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not conform to class InvariantClass&lt;span class=&quot;s1&quot;&gt;'s type parameter bounds [A &amp;gt;: Cat]
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;       new InvariantClass[Dog]
           ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[OntheRoad]
&lt;span class=&quot;go&quot;&gt;res8: InvariantClass[OntheRoad] = InvariantClass@45ecdd32

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; new InvariantClass[LikeFish]
&lt;span class=&quot;go&quot;&gt;res9: InvariantClass[LikeFish] = InvariantClass@fe38d1e

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;a--b-view-bound&quot;&gt;A &amp;lt;% B View Bound&lt;/h4&gt;
&lt;p&gt;View Bound 代表可被視為 B 的 A 都可以成功．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Trat1
&lt;span class=&quot;go&quot;&gt;defined trait Trat1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Printer[A]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value: A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   def print() = println(value.toString)
     | }
defined class Printer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class SubPrinter[A]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value: A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Printer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; with Trat1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   override def print() = println(&quot;Sub print&quot;)
     | }
defined class SubPrinter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; implicit def int2print &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : Printer[Int] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Printer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;int2print: (i: Int)Printer[Int]

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; implicit def string2print &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : Printer[String] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Printer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;string2print: (s: String)Printer[String]

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def f1[A &amp;lt;% Printer[A]]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a: A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; a.print&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;f1: [A](a: A)(implicit evidence$&lt;/span&gt;1: A &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Printer[A]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Unit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;由於隱含轉換的關係 int 、String 會轉換成 Printer，所以也都可以印出來 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; f1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; f1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; f1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3D&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:22: error: No implicit view available from Double &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Printer[Double].
&lt;span class=&quot;go&quot;&gt;       f1(3D)
         ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;View Bound 如果是用 Curry 表示的話如下，將 A 轉換成 Printer 再列印出來:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def f2[A]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a: A&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;implicit trans: A &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Printer[A]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; trans&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.print&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;f2: [A](a: A)(implicit trans: A =&amp;gt;&lt;/span&gt; Printer[A]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Unit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; f2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; f2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;123
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Bound 讓我們在定義型態可以擁有更多選擇(Upper bound、Lower bound、View Bound)，也更有彈性．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Bounds</summary></entry><entry><title type="html">Scala day 24 (variances)</title><link href="http://localhost:4000/scala/2017/12/22/scala_day24.html" rel="alternate" type="text/html" title="Scala day 24 (variances)" /><published>2017-12-22T10:44:17+08:00</published><updated>2017-12-22T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/22/scala_day24</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/22/scala_day24.html">&lt;h3 id=&quot;variances&quot;&gt;variances&lt;/h3&gt;
&lt;p&gt;就是定義型別，以及型別的父子類別的繼承關係．&lt;br /&gt;
首先先訂幾個類別並有繼承關係 : 
抽象類別 Animal、繼承 Animal 的 Cat、繼承 Cat 的 MexCat．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;abstract class Animal {
  def name: String
}
class Cat(catName: String) extends Animal {
  def name = catName
}

class MexCat(MexCatName: String) extends Cat(MexCatName) {
  override def name = MexCatName
}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;invariant&quot;&gt;Invariant&lt;/h3&gt;
&lt;p&gt;Invariant 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class InvariantClass[A]
&lt;span class=&quot;go&quot;&gt;defined class InvariantClass
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Invariant 代表說該型態就一定是要定義的那一個，像這邊定義的是 Cat 類別，所以使用時都只能用 Cat :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: InvariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;invarMethod: (x: InvariantClass[Cat])Unit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以這邊呼叫 invarMethod 方法時，只有 Cat 不會錯誤，MexCat 及 Animal 都會出錯 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new InvariantClass[MexCat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : InvariantClass[MexCat]
 required: InvariantClass[Cat]
Note: MexCat &amp;lt;: Cat, but class InvariantClass is invariant in type A.
You may wish to define A as +A instead. (SLS 4.5)
       invarMethod(new InvariantClass[MexCat])
                   ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt;   invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new InvariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt;   invarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new InvariantClass[Animal]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : InvariantClass[Animal]
 required: InvariantClass[Cat]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Note: Animal &amp;gt;&lt;/span&gt;: Cat, but class InvariantClass is invariant &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;A.
&lt;span class=&quot;go&quot;&gt;You may wish to define A as -A instead. (SLS 4.5)
         invarMethod(new InvariantClass[Animal])
                     ^

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;covariant&quot;&gt;covariant&lt;/h3&gt;
&lt;p&gt;covariant 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class CovariantClass[+A]
&lt;span class=&quot;go&quot;&gt;defined class CovariantClass
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;covariant 代表說，只要是 A 與有繼承 A 這個形態的類別(也就是 A 的子類別)，也都可以使用 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def covarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: CovariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;covarMethod: (x: CovariantClass[Cat])Unit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以呼叫 covarMethod 方法時，MexCat(Cat的子類別)以及 Cat 都會成功，只有 Animal 會失敗．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; covarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new CovariantClass[MexCat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; covarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new CovariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; covarMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new CovariantClass[Animal]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : CovariantClass[Animal]
 required: CovariantClass[Cat]
         covarMethod(new CovariantClass[Animal])
                     ^

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;contravariant&quot;&gt;contravariant&lt;/h3&gt;
&lt;p&gt;contravariant 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class ContravariantClass[-A]
&lt;span class=&quot;go&quot;&gt;defined class ContravariantClass
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;contravariant 代表說，只要是 A 與 A 這個形態的父類別，也都可以使用 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: ContravariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;contraMethod: (x: ContravariantClass[Cat])Unit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以呼叫 contraMethod 方法時，Cat 以及 Animal(Cat 的父類別) 都會成功，只有 MexCat 會失敗．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[MexCat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:15: error: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;mismatch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; found   : ContravariantClass[MexCat]
 required: ContravariantClass[Cat]
         contraMethod(new ContravariantClass[MexCat])
                      ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[Animal]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接著再來用 trait 測試看看 :&lt;br /&gt;
定義兩個 trait OntheRoad 及 LikeFish&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait OntheRoad
&lt;span class=&quot;go&quot;&gt;defined trait OntheRoad

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait LikeFish
&lt;span class=&quot;go&quot;&gt;defined trait LikeFish
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;讓 Cat 除了繼承 Animal 並同時擁有 OntheRoad 及 LikeFish 這兩個特徵 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Cat&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;catName: String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Animal with OntheRoad with LikeFish &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   def name = catName
     | }
defined class Cat
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接著重新定義一次 function 再呼叫看看，trait 都可以成功 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: ContravariantClass[Cat]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;contraMethod: (x: ContravariantClass[Cat])Unit

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[OntheRoad]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; contraMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new ContravariantClass[LikeFish]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala 的 variances 除了可以定義型別(Invariant)又加上了可用父類別(contravariant)及子類別(covariant)的選擇，讓型態上擴充性更強．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">variances 就是定義型別，以及型別的父子類別的繼承關係． 首先先訂幾個類別並有繼承關係 : 抽象類別 Animal、繼承 Animal 的 Cat、繼承 Cat 的 MexCat．</summary></entry><entry><title type="html">Scala day 23 (implicit conversion)</title><link href="http://localhost:4000/scala/2017/12/21/scala_day23.html" rel="alternate" type="text/html" title="Scala day 23 (implicit conversion)" /><published>2017-12-21T11:44:17+08:00</published><updated>2017-12-21T11:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/21/scala_day23</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/21/scala_day23.html">&lt;h3 id=&quot;implicit-conversion&quot;&gt;implicit conversion&lt;/h3&gt;
&lt;p&gt;就是在當某物件沒有要呼叫的方法時，可以定義 implicit function 編譯器會嘗試使用 implicit function 來呼叫，將原物件轉換成另一個物件．&lt;br /&gt;
由於 Int 沒有 append 方法所以下面執行會失敗 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; 1 append 2
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: value append is not a member of Int
&lt;span class=&quot;go&quot;&gt;       1 append 2
         ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定義一個 MyAppend 及 append 方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def append(newNum: Int) = num.toString + newNum.toString
     | }
defined class MyAppend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 REPL 直接寫 implicit 會出現 warning，但還是可以使用的 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; implicit def intToMyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new MyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: warning: implicit conversion method intToMyAppend should be enabled
&lt;span class=&quot;go&quot;&gt;by making the implicit value scala.language.implicitConversions visible.
This can be achieved by adding the import clause 'import scala.language.implicitConversions'
or by setting the compiler option -language:implicitConversions.
See the Scaladoc for value scala.language.implicitConversions for a discussion
why the feature should be explicitly enabled.
       implicit def intToMyAppend(x:Int) = new MyAppend(x)
                    ^
intToMyAppend: (x: Int)MyAppend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果不要有 warning 可以 import scala.language.implicitConversions :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.language.implicitConversions
&lt;span class=&quot;go&quot;&gt;import scala.language.implicitConversions

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; implicit def intToMyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new MyAppend&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;intToMyAppend: (x: Int)MyAppend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;加上 implicit 函式後，編譯器會在範圍內找到對應型態的 implicit 函式呼叫．所以會變成 intToMyAppend(1) append 2&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; 1 append 2
&lt;span class=&quot;go&quot;&gt;res8: String = 12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;也可以把 implicit 函式抽成一個 object．&lt;/p&gt;

&lt;p&gt;寫一隻 MyAppend.scala 並 compiler :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;class MyAppend(num: Int) {
 def append(newNum: Int) = num.toString + newNum.toString
}

scalac MyAppend.scala
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;寫一隻 MyConvert.scala 並 compiler :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;object MyConvert {
 implicit def intToMyAppend(x:Int) = new MyAppend(x)
}

scalac MyConvert.scala
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;寫一隻 ConvertTest.scala，並將有定義隱含函式的 object(MyConvert) import 進來 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;import MyConvert._

object ConvertTest {
    def main(args: Array[String]): Unit = {
    val result = 1 + 2
    println(result)
    val res = 1 append 2
    println(res)
  }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接著執行 ConvertTest.scala :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;daniel@Danielde-MacBook-Pro &amp;gt;&lt;/span&gt; scala ConvertTest.scala
&lt;span class=&quot;go&quot;&gt;3
12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在方法裡使用 implicit 物件，如果使用該方法時沒傳入物件，則會使用 implicit 物件傳入．
寫一隻 Employees.scala，並 compiler :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;class Employees(name:String ,val amt:Int) {
  def getName = name
}

object Employees {

  import Employees._

  implicit val employee: Employees = new Employees(&quot;Daniel&quot;,50)

  def sayHello(implicit employee: Employees) = &quot;Hello &quot; + employee.getName
}


scalac Employees.scala
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;寫一隻 EmployeesTest.scala，sayHello 沒給參數的話，會帶隱含物件，所以會印出 Daniel．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;object EmployeesTest {
  def main(args: Array[String]): Unit = {
    println(Employees.sayHello)//Hello Daniel
    println(Employees.sayHello(new Employees(&quot;Sam&quot;,5000)))//Hello Sam
  }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;執行時，加上 classpath :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;daniel@Danielde-MacBook-Pro &amp;gt;&lt;/span&gt; scala &lt;span class=&quot;nt&quot;&gt;-cp&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./&quot;&lt;/span&gt; EmployeesTest.scala
&lt;span class=&quot;go&quot;&gt;Hello Daniel
Hello Sam
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala 的 implicit conversion 主要是透過型態來找到對應，並不是 function 或變數的名稱找．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">implicit conversion 就是在當某物件沒有要呼叫的方法時，可以定義 implicit function 編譯器會嘗試使用 implicit function 來呼叫，將原物件轉換成另一個物件． 由於 Int 沒有 append 方法所以下面執行會失敗 :</summary></entry><entry><title type="html">Scala day 22 (Companion Object &amp;amp; apply &amp;amp; update)</title><link href="http://localhost:4000/scala/2017/12/21/scala_day22.html" rel="alternate" type="text/html" title="Scala day 22 (Companion Object &amp; apply &amp; update)" /><published>2017-12-21T10:44:17+08:00</published><updated>2017-12-21T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/21/scala_day22</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/21/scala_day22.html">&lt;h3 id=&quot;companion-object&quot;&gt;Companion Object&lt;/h3&gt;
&lt;p&gt;如果 object 的名稱和 class 名稱相同，稱為 Companion Object (Employee)．
由於 Companion Object 是要將 trait 與 object 定義在同一個檔案裡，但由於這邊是使用 REPL 做 demo，
所以再用一個 object(Emp) 把它們包起來，否則 REPL 的環境不會被視為是 Companion Object，如果是定義在一個 Employee.scala 檔案裡，則不用 Emp 包起來 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.collection.mutable.ListBuffer
&lt;span class=&quot;go&quot;&gt;import scala.collection.mutable.ListBuffer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Emp &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |
     |   class Employee(val salary: Int)
     |
     |   object Employee {
     |
     |     private val emps: ListBuffer[Employee] = new ListBuffer[Employee]
     |
     |     private var sum = 0
     |
     |     def addEmp(emp:Employee) = emps += emp
     |
     |     def sumSalary = {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |       emps.foreach(emp =&amp;gt;&lt;/span&gt; sum +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; emp.salary&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |       sum
     |     }
     |   }
     | }
defined object Emp

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Emp.Employee.addEmp&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new Emp.Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res0: scala.collection.mutable.ListBuffer[Emp.Employee] = ListBuffer(Emp$&lt;/span&gt;Employee@35eee641&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Emp.Employee.addEmp&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new Emp.Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res1: scala.collection.mutable.ListBuffer[Emp.Employee] = ListBuffer(Emp$&lt;/span&gt;Employee@35eee641, Emp&lt;span class=&quot;nv&quot;&gt;$Employee&lt;/span&gt;@4f3c7808&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Emp.Employee.sumSalary
&lt;span class=&quot;go&quot;&gt;res2: Int = 30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;apply-function&quot;&gt;apply function&lt;/h3&gt;
&lt;p&gt;就是將參數傳給(apply) function 的意思&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val sum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int,num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num1 + num2
&lt;span class=&quot;gp&quot;&gt;sum: (Int, Int) =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1197&lt;/span&gt;/530446114@3f06abd
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res15: Int = 5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum.apply&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res14: Int = 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;將參數傳給(apply) object&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val baseNum = 10
     |  def apply(num1:Int , num2:Int) = baseNum + num1 + num2
     | }
defined object Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Counter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res16: Int = 15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;update-function&quot;&gt;update function&lt;/h3&gt;
&lt;p&gt;定義 : 
a(x) = y 相當於 a.update(x, y)，a(x,y) = x 相當於 a.update(x,y,z) 以此類推．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Cellphone &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |
     |   val numbers = scala.collection.mutable.Map[String,(Int,Int)]()
     |
     |   def apply(name:String) = numbers(name)
     |   def update(name:String, number:(Int,Int)) = numbers(name) = number
     | }
defined class Cellphone

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val phonebook &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Cellphone
&lt;span class=&quot;go&quot;&gt;phonebook: Cellphone = Cellphone@1d9af731
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;會呼叫 Cellphone 的 update 方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)=(&lt;/span&gt;123,45678&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)=(&lt;/span&gt;321,876543&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;會呼叫 Cellphone 的 apply 方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res5: (Int, Int) = (123,45678)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; phonebook&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res6: (Int, Int) = (321,876543)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;companion-object-with-apply&quot;&gt;Companion Object with apply&lt;/h3&gt;
&lt;p&gt;apply 可以設計成為 factory pattern :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Trans &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   trait Transportation {
     |     def go
     |   }
     |   object Transportation {
     |     private class Car extends Transportation {
     |       override def go {println(&quot;drive car&quot;)}
     |     }
     |     private class Boat extends Transportation {
     |       override def go {println(&quot;drive boat&quot;)}
     |     }
     |     def apply(name:String): Transportation = {
     |       if(name == &quot;car&quot;) {
     |         new Car
     |       } else {
     |         new Boat
     |       }
     |     }
     |   }
     | }
defined object Trans

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val car &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Trans.Transportation&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;car&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;car: Trans.Transportation = Trans$&lt;/span&gt;Transportation&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;@178cfe5e
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; car.go
&lt;span class=&quot;go&quot;&gt;drive car

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val boat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Trans.Transportation&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boat&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;boat: Trans.Transportation = Trans$&lt;/span&gt;Transportation&lt;span class=&quot;nv&quot;&gt;$Boat&lt;/span&gt;@31e90355
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; boat.go
&lt;span class=&quot;go&quot;&gt;drive boat

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala 裡 object 可被視為 function，function 也可被視為 object，這觀念跟物件導向的觀念不太一樣，感覺 Companion Object 、apply、update 等功能也是為了要實作 functional programming．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;參考資料&quot;&gt;參考資料&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;https://stackoverflow.com/questions/9737352/what-is-the-apply-function-in-scala&lt;/p&gt;</content><author><name></name></author><summary type="html">Companion Object 如果 object 的名稱和 class 名稱相同，稱為 Companion Object (Employee)． 由於 Companion Object 是要將 trait 與 object 定義在同一個檔案裡，但由於這邊是使用 REPL 做 demo， 所以再用一個 object(Emp) 把它們包起來，否則 REPL 的環境不會被視為是 Companion Object，如果是定義在一個 Employee.scala 檔案裡，則不用 Emp 包起來 :</summary></entry></feed>