<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-17T02:16:11+08:00</updated><id>http://localhost:4000/</id><title type="html">Daniel’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Scala day 20 (Array &amp;amp; ArrayBuffer)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day20.html" rel="alternate" type="text/html" title="Scala day 20 (Array &amp; ArrayBuffer)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day20</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day20.html">&lt;h3 id=&quot;array&quot;&gt;Array&lt;/h3&gt;
&lt;p&gt;Array 是一個固定長度且有順序性的容器，Array 是 mutable 的，在 new 時需給定長度．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val numbers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Array[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;numbers: Array[Int] = Array(0, 0, 0, 0, 0)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; numbers
&lt;span class=&quot;go&quot;&gt;res107: Array[Int] = Array(1, 1, 5, 0, 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;直接給 Array 元素，取出元素直接用 index 即可，從 0 開始 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allen&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Loues&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;names: Array[String] = Array(Allen, Daniel, Jack, Ray, Loues)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res101: String = Allen
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;利用 Array.ofDim 建立多維度的 Array :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val multiNums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array.ofDim[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;multiNums: Array[Array[Int]] = Array(Array(0, 0, 0), Array(0, 0, 0))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val multiNums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array.ofDim[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3,4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;multiNums: Array[Array[Array[Int]]] = Array(Array(Array(0, 0, 0, 0), Array(0, 0, 0, 0), Array(0, 0, 0, 0)), Array(Array(0, 0, 0, 0), Array(0, 0, 0, 0), Array(0, 0, 0, 0)))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; multiNums
&lt;span class=&quot;go&quot;&gt;res112: Array[Array[Array[Int]]] = Array(Array(Array(1, 2, 0, 3), Array(0, 0, 0, 0), Array(0, 0, 0, 0)), Array(Array(0, 0, 0, 0), Array(0, 0, 0, 0), Array(0, 0, 0, 0)))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt;- 0 to 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  for(j &amp;lt;- 0 to 2) {
     |   for(k &amp;lt;- 0 to 3) {
     |    println(multiNums(i)(j)(k))
     |   }
     |  }
     | }
1
2
0
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;copy-array-and-compare&quot;&gt;Copy Array and Compare&lt;/h4&gt;
&lt;p&gt;使用 clone 複製 Array :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allen&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,1,&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Loues&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;names: Array[Any] = Array(Allen, Daniel, 1, Ray, Loues)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val cnames &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; names.clone&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cnames: Array[Any] = Array(Allen, Daniel, 1, Ray, Loues)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 == 比較 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; cnames
&lt;span class=&quot;go&quot;&gt;res127: Boolean = false

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names.deep &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; cnames.deep
&lt;span class=&quot;go&quot;&gt;res128: Boolean = true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 sameElements 比較容器的元素內容 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names sameElements cnames
&lt;span class=&quot;go&quot;&gt;res129: Boolean = true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再來看多維度的陣列&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nums1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array.ofDim[Int]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nums1: Array[Array[Int]] = Array(Array(0, 0, 0), Array(0, 0, 0))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 4
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1
&lt;span class=&quot;go&quot;&gt;res134: Array[Array[Int]] = Array(Array(0, 2, 0), Array(0, 3, 4))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;多維度陣列 copy 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nums2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; nums1.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_.clone&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nums2: Array[Array[Int]] = Array(Array(0, 2, 0), Array(0, 3, 4))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;多維度陣列的比較，這時候使用 sameElements 就會是 false 但使用 == 比較 deep 還是會是 true :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1 &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; nums2
&lt;span class=&quot;go&quot;&gt;res135: Boolean = false

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1.deep &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; nums2.deep
&lt;span class=&quot;go&quot;&gt;res136: Boolean = true

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums1 sameElements nums2
&lt;span class=&quot;go&quot;&gt;res138: Boolean = false

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;arraybuffer&quot;&gt;ArrayBuffer&lt;/h3&gt;
&lt;p&gt;ArrayBuffer 也是 mutable 的，與 Array 差異是它不用給定固定長度．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import collection.mutable.ArrayBuffer
&lt;span class=&quot;go&quot;&gt;import collection.mutable.ArrayBuffer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new ArrayBuffer[String]
&lt;span class=&quot;go&quot;&gt;names: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新增元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Andy&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res142: names.type = ArrayBuffer(Andy)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res143: names.type = ArrayBuffer(Andy, Daniel, Sam)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;刪除元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Andy&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res144: names.type = ArrayBuffer(Daniel)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;轉成 Array&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names.toArray
&lt;span class=&quot;go&quot;&gt;res146: Array[String] = Array(Daniel)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;比較 Array 時，可能用 deep function 後再用 == 比較元素內容會比較準確，因為多維度陣列使用 sameElements 會是錯的．&lt;/li&gt;
  &lt;li&gt;Array 可知道大小時用 Array，如果預先無法知道大小再用 ArrayBuffer．&lt;/li&gt;
  &lt;li&gt;建立Array 用 new Array[Int](5)，多維度Array 用 Array.ofDim[Int](2,3)．&lt;/li&gt;
  &lt;li&gt;copy Array 用 names.clone()，多維度Array 用 nums1.map(_.clone)．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Array Array 是一個固定長度且有順序性的容器，Array 是 mutable 的，在 new 時需給定長度．</summary></entry><entry><title type="html">Scala day 19 (Option type)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day19.html" rel="alternate" type="text/html" title="Scala day 19 (Option type)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day19</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day19.html">&lt;h3 id=&quot;option-type&quot;&gt;Option type&lt;/h3&gt;
&lt;p&gt;Option[T] 有兩個物件 Some(x) 與 None．Some(x) 的 x 是指型別為 T 的值，None 是指沒有這個值．
像下面例子，Map 的 get api 定義 :&lt;br /&gt;
def get(key: K): Option[V]&lt;br /&gt;
所以 Map get 回傳的也是 Option 型態，有值會回傳 Some(Int)，沒有的話會回傳 None :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val emps &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;-&amp;gt;10,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;-&amp;gt;20,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;-&amp;gt;30,&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;-&amp;gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;emps: scala.collection.immutable.Map[String,Int] = Map(Sam -&amp;gt;&lt;/span&gt; 10, Daniel -&amp;gt; 20, Jack -&amp;gt; 30, Ray -&amp;gt; 40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; emps get &lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res82: Option[Int] = Some(20)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; emps get &lt;span class=&quot;s2&quot;&gt;&quot;Dan&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res83: Option[Int] = None
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;運用在-match-expression-&quot;&gt;運用在 Match Expression :&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def Hi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name: Option[String]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; name match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case Some(nm) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi &quot;&lt;/span&gt; + nm
&lt;span class=&quot;gp&quot;&gt;     |  case None =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Not String&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
Hi: (name: Option[String])String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val name:Option[String] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;name: Option[String] = Some(Daniel)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Hi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res85: String = Hi Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Hi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res88: String = Not String
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;運用在-lambda-expression-&quot;&gt;運用在 lambda Expression :&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val initNum: Option[Int] &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case Some(num) =&amp;gt;&lt;/span&gt; num &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2
&lt;span class=&quot;gp&quot;&gt;     |  case None =&amp;gt;&lt;/span&gt; 0
&lt;span class=&quot;go&quot;&gt;     | }
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;initNum: Option[Int] =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1520&lt;/span&gt;/1940548313@253ecbdc
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; initNum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res89: Int = 20

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; initNum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res90: Int = 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;運用-mapflattenflatmap-操作-list-&quot;&gt;運用 map、flatten、flatMap 操作 List :&lt;/h4&gt;
&lt;p&gt;定義一個 function 如果可以轉 Int 則回傳 Some(i) 否則 None&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def initNum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s:Any&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Option[Int] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  try {
     |   Some(Integer.parseInt(s.toString))
     |  } catch {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |   case e: Exception =&amp;gt;&lt;/span&gt; None
&lt;span class=&quot;go&quot;&gt;     |  }
     | }
initNum: (s: Any)Option[Int]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定義一個不同元素 type 的 List :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val empList &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; , 2 , &lt;span class=&quot;s2&quot;&gt;&quot;aa&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;4&quot;&lt;/span&gt; , 5D &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;empList: List[Any] = List(1, 2, aa, 4, 5.0)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 map 可將 List 的每個元素帶到 initNum 這方法然後回傳一個新的 List :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res91: List[Option[Int]] = List(Some(1), Some(2), None, Some(4), None)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;flatten 會把Some(i) 的 i 值取出，None 過濾掉，然後將數值展開 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.flatten
&lt;span class=&quot;go&quot;&gt;res92: List[Int] = List(1, 2, 4)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;map 搭配 flatten 相當於 flatMap :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.flatMap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res94: List[Int] = List(1, 2, 4)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後透過 sum 算出加總 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; empList.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;initNum&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.flatten.sum
&lt;span class=&quot;go&quot;&gt;res93: Int = 7

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Option type 感覺可以避免物件回傳 null，至少會是 None 物件，讓我想到一個 design pattern 是 Null Object Pattern，也是會定義一個 null 物件，不讓值直接變成 null，可預防 NullPointerException．&lt;/li&gt;
  &lt;li&gt;Scala 的某些 collection 已經幫我們訂好回傳 Option type 在使用時可注意一下，很多種不同寫法需要再思考．&lt;/li&gt;
  &lt;li&gt;map、flatten、flatMap 感覺會很容易使用到，這邊先提供個例子，有機會再額外介紹．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Option type Option[T] 有兩個物件 Some(x) 與 None．Some(x) 的 x 是指型別為 T 的值，None 是指沒有這個值． 像下面例子，Map 的 get api 定義 : def get(key: K): Option[V] 所以 Map get 回傳的也是 Option 型態，有值會回傳 Some(Int)，沒有的話會回傳 None :</summary></entry><entry><title type="html">Scala day 18 (Map)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day18.html" rel="alternate" type="text/html" title="Scala day 18 (Map)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day18</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day18.html">&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;
&lt;p&gt;Map 的特色是 key / value．有分為 mutable 及 immutable．&lt;/p&gt;

&lt;p&gt;immutable 的 Map :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val m &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt; -&amp;gt; 1 , &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt; -&amp;gt; 2 , &lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt; -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;m: scala.collection.immutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a2 -&amp;gt; 2, a3 -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;看 Map 的 kyes 及 values :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.keys
&lt;span class=&quot;go&quot;&gt;res163: Iterable[String] = Set(a1, a2, a3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.values
&lt;span class=&quot;go&quot;&gt;res164: Iterable[Int] = MapLike.DefaultValuesIterable(1, 2, 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;取得元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m get &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res167: Option[Int] = Some(2)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res165: Int = 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 contains 判斷 key 是否存在 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m contains &lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res168: Boolean = false

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m contains &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res169: Boolean = true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;getOrElse 取得 key 不存在的話就給參數 2 的值 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val msg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; m getOrElse &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;nodata&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;msg: Any = nodata
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m + &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a4&quot;&lt;/span&gt; -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res172: scala.collection.immutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a2 -&amp;gt; 2, a3 -&amp;gt; 3, a4 -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m + &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt; -&amp;gt; 5 , &lt;span class=&quot;s2&quot;&gt;&quot;a6&quot;&lt;/span&gt; -&amp;gt; 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res174: scala.collection.immutable.Map[String,Int] = Map(a6 -&amp;gt;&lt;/span&gt; 6, a5 -&amp;gt; 5, a3 -&amp;gt; 3, a1 -&amp;gt; 1, a2 -&amp;gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mutable 的 Map，需要 import scala.collection.mutable.Map :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.collection.mutable.Map
&lt;span class=&quot;go&quot;&gt;import scala.collection.mutable.Map

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val m &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt; -&amp;gt; 1 , &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt; -&amp;gt; 2 , &lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt; -&amp;gt; 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;m: scala.collection.mutable.Map[String,Int] = Map(a1 -&amp;gt;&lt;/span&gt; 1, a3 -&amp;gt; 3, a2 -&amp;gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新增元素 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a4&quot;&lt;/span&gt; -&amp;gt; 4 , &lt;span class=&quot;s2&quot;&gt;&quot;a5&quot;&lt;/span&gt; -&amp;gt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;res160: m.type = Map(a1 -&amp;gt;&lt;/span&gt; 1, a3 -&amp;gt; 3, a5 -&amp;gt; 5, a2 -&amp;gt; 2, a4 -&amp;gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.keys
&lt;span class=&quot;go&quot;&gt;res161: Iterable[String] = Set(a1, a3, a5, a2, a4)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; m.values
&lt;span class=&quot;go&quot;&gt;res162: Iterable[Int] = HashMap(1, 3, 5, 2, 4)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Map 的特色是 key / value．有分為 mutable 及 immutable．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Map Map 的特色是 key / value．有分為 mutable 及 immutable．</summary></entry><entry><title type="html">Scala day 17 (Currying)</title><link href="http://localhost:4000/scala/2017/12/09/scala_day17.html" rel="alternate" type="text/html" title="Scala day 17 (Currying)" /><published>2017-12-09T10:44:17+08:00</published><updated>2017-12-09T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/09/scala_day17</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/09/scala_day17.html">&lt;h3 id=&quot;curry&quot;&gt;Curry&lt;/h3&gt;
&lt;p&gt;一般函式的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int , num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; num1 + num2
&lt;span class=&quot;go&quot;&gt;sum: (num1: Int, num2: Int)Int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Curry 就是將多個參數的函數變成一個參數的函式再將它們curry起來，Curry 的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; num1 + num2
&lt;span class=&quot;go&quot;&gt;sum: (num1: Int)(num2: Int)Int

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res20: Int = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Curry 相當於下面例子，但下面例子可以先呼叫一個參數(val tempSum = sum(1))，再呼叫第二個(tempSum(2)) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num1 + num2
&lt;span class=&quot;gp&quot;&gt;sum: (num1: Int)Int =&amp;gt;&lt;/span&gt; Int
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res21: Int = 3

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val tempSum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;tempSum: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1215&lt;/span&gt;/966153678@59f32d74
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; tempSum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res22: Int = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Curry 需要再後面加上 _ 佔位符符號(placeholder notation)當作第二個參數 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val tempSum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:12: error: not enough arguments &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;method sum: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1: Int, num2: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Int.
&lt;span class=&quot;go&quot;&gt;Unspecified value parameter num2.
       val tempSum = sum(1)
                        ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val tempSum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;_
&lt;span class=&quot;gp&quot;&gt;tempSum: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1221&lt;/span&gt;/1238850480@744b5bd7
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; tempSum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res24: Int = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般函式 _ 的例子 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num1:Int , num2:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; num1 + num2
&lt;span class=&quot;go&quot;&gt;sum: (num1: Int, num2: Int)Int

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val &lt;span class=&quot;nv&quot;&gt;sum1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 , _:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;sum1: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1231&lt;/span&gt;/433000386@35cc54a7
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res29: Int = 3

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再看一個例子，定義一個 sum 函數，參數一是 lambda expressions(Int =&amp;gt; Int)，參數二 是 Int :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add:Int &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int , num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;sum: (add: Int =&amp;gt;&lt;/span&gt; Int, num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Int
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接著就可以實作不同的 lambda expressions，產出不同算法的結果&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num + 1 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res34: Int = 4

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; num &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res35: Int = 8

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ + 1 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res36: Int = 4

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2 , 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res37: Int = 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;改成 Currying 的寫法，&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add:Int &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;sum: (add: Int =&amp;gt;&lt;/span&gt; Int&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;num: Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Int
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val &lt;span class=&quot;nb&quot;&gt;times&lt;/span&gt; : Int &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 3
&lt;span class=&quot;gp&quot;&gt;times: Int =&amp;gt;&lt;/span&gt; Int &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;Lambda&lt;span class=&quot;nv&quot;&gt;$1271&lt;/span&gt;/966830519@75c70563
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 scala function 參數只有一個時，可以用大括號(curly braces) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 5 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res40: Int = 45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在測試看看 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def hello&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + name
&lt;span class=&quot;go&quot;&gt;hello: (name: String)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; hello &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res45: String = Hello Daniel
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可接受任何型態 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def hello &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + _
&lt;span class=&quot;gp&quot;&gt;hello: Any =&amp;gt;&lt;/span&gt; String
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; hello &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res46: String = Hello Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; hello &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;123&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res47: String = Hello 123
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Curry 似乎是 functional programming 很重要的一個觀念，這邊先知道是什麼，之後學習 functional programming 時再來思考 Curry 也許會更有感覺．&lt;/li&gt;
  &lt;li&gt;由於 Curry 是把多個參數拆分成一個一個的參數，所以變成只有一個參數這時候可以使用大括號讓程式看起來更有結構性．例如foldLeft就有運用到，def foldLeft[B](z: B)(f: (B, A) =&amp;gt; B): B ．程式寫起來可使用大括號 : wordsData.foldLeft(0){(sum,tup) =&amp;gt; sum + tup._2}．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Curry 一般函式的寫法 :</summary></entry><entry><title type="html">Scala day 16 (traits self type)</title><link href="http://localhost:4000/scala/2017/12/07/scala_day16.html" rel="alternate" type="text/html" title="Scala day 16 (traits self type)" /><published>2017-12-07T10:44:17+08:00</published><updated>2017-12-07T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/07/scala_day16</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/07/scala_day16.html">&lt;h3 id=&quot;self-types&quot;&gt;Self types&lt;/h3&gt;
&lt;p&gt;Self types 使用的符號是 =&amp;gt;&lt;br /&gt;
Self types 的作用是把不同的 trait 混合(mixed)在一起，並且定義了要 with 它的話，也必須同時具有它 this 的 trait :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Ids &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val id = &quot;ids&quot;
     |  def getId : String
     | }
defined trait Ids

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val name = &quot;names&quot;
     |  def getName : String
     | }
defined trait Names
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this 只能有一個，所以要多個 Self types 要使用 with :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Users &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  this : Ids with Names =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val user = &quot;user&quot;
     |  def getUser : String
     | }
defined trait Users
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定義一個 class 去 extends Users，這時候會出錯，因為使用 Self types 的 trait 等於強迫定義了如果要 with 它時，也一定要 with 它所混合的 trait．
這邊 Users 的 Self types 有 Ids 與 Names，所以類別 Customer 也要 with Ids 與 Names :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,user:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:12: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; self-type Customer does not conform to Users's selftype Users with Ids with Names
       class Customer(id:String,name:String,user:String) extends Users
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果 class 的變數名稱如果與 trait 的變數相同會產生衝突，所以要注意(Ids已有id,Names已有name,Users已有user) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,user:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users with Ids with Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def getId = id
     |  def getName = name
     |  def getUser = user
     | }
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt; requires field but conflicts with value id &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Ids
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                      ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; requires field but conflicts with value name &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Names
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                                ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt; requires field but conflicts with value user &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Users
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                                            ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;把變數名稱改掉 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cid:String,cname:String,cuser:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users with Ids with Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def getId = cid
     |  def getName = cname
     |  def getUser = cuser
     | }
defined class Customer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val cu &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;user1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cu: Customer = Customer@3a62fa79

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; cu.getId
&lt;span class=&quot;go&quot;&gt;res4: String = 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; cu.id
&lt;span class=&quot;go&quot;&gt;res7: String = ids

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;self-types-定義-function&quot;&gt;Self types 定義 function&lt;/h3&gt;
&lt;p&gt;Self types 也可以定義 with 它的類別一定也要具有 Self types 定義好的方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  this : {
     |   def count(mum1:Int,num2:Int): Unit
     |   def getSum: Int
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |  } =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
defined trait Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  this : Counter =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
defined trait MyCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;沒實作方法的話，就會出錯 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class RealCounter extends MyCounter with Counter
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; self-type RealCounter does not conform to Counter's selftype Counter with AnyRef{def count(mum1: Int,num2: Int): Unit;&lt;/span&gt; def getSum: Int&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;       class RealCounter extends MyCounter with Counter
                                                ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再來做個實驗，如果是 abstract class，沒定義的話還是會出錯，但可以不用在 abstract class 實作出方法，可以先定義成抽象方法，就可以過了 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class RealCounter extends MyCounter with Counter
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; self-type RealCounter does not conform to Counter's selftype Counter with AnyRef{def count(mum1: Int,num2: Int): Unit;&lt;/span&gt; def getSum: Int&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;       abstract class RealCounter extends MyCounter with Counter
                                                         ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class RealCounter extends MyCounter with Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def count(num1:Int,num2:Int): Unit
     |  def getSum: Int
     | }
defined class RealCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後還是乖乖實作方法吧 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class RealCounter extends MyCounter with Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  var sum = 0
     |  def count(num1:Int , num2:Int):Unit = sum = num1 + num2
     |  def getSum = sum
     | }
defined class RealCounter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new RealCounter
&lt;span class=&quot;go&quot;&gt;counter: RealCounter = RealCounter@5e585461

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter.getSum
&lt;span class=&quot;go&quot;&gt;res9: Int = 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;trait 本身其實已經是在定義方法及型態了，所以 Self types 概念上好像差不多．差異是不用寫很多 extends 和 with 定義在 this 裡就好．
雖然現在還沒了解它的好處，不過可以先玩玩看．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Self types Self types 使用的符號是 =&amp;gt; Self types 的作用是把不同的 trait 混合(mixed)在一起，並且定義了要 with 它的話，也必須同時具有它 this 的 trait :</summary></entry><entry><title type="html">Scala day 15 (traits &amp;amp; abstract class)</title><link href="http://localhost:4000/scala/2017/12/06/scala_day15.html" rel="alternate" type="text/html" title="Scala day 15 (traits &amp; abstract class)" /><published>2017-12-06T10:44:17+08:00</published><updated>2017-12-06T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/06/scala_day15</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/06/scala_day15.html">&lt;h3 id=&quot;traits-vs-abstract-class&quot;&gt;traits VS abstract class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;抽象類別跟 trait 其實很像，跟 trait 還是有一些差異 :&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;抽象類別只能被單一繼承trait-可以被單一繼承又可以-with-多個&quot;&gt;抽象類別只能被單一繼承，trait 可以被單一繼承又可以 with 多個&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class A
&lt;span class=&quot;go&quot;&gt;defined class A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class B
&lt;span class=&quot;go&quot;&gt;defined class B

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C extends A
&lt;span class=&quot;go&quot;&gt;defined class C


&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait A
&lt;span class=&quot;go&quot;&gt;defined trait A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait B
&lt;span class=&quot;go&quot;&gt;defined trait B

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C extends A with B
&lt;span class=&quot;go&quot;&gt;defined class C
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;記得使用 with trait 要先 extends 才可以&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C with A with B
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt; expected but &lt;span class=&quot;s1&quot;&gt;'with'&lt;/span&gt; found.
&lt;span class=&quot;go&quot;&gt;       class C with A with B
               ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;抽象類別有建構子trait-沒有&quot;&gt;抽象類別有建構子，trait 沒有&lt;/h4&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;cala&amp;gt;&lt;/span&gt; abstract class Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class Employee

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: traits or objects may not have parameters
&lt;span class=&quot;go&quot;&gt;       trait Employee(id:String,name:String)
                     ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;抽象類別的-super-vs-trait-的-super&quot;&gt;抽象類別的 super VS trait 的 super&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;抽象類別的super是靜態呼叫父類別的方法，trait 是由於可以 with 多個所以 super 是動態的無法知道是哪個父類別，只有在建立類別時才會知道．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;抽象類別的 super :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def count(num1: Int , num2: Int) : Unit
     | }
defined class Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyCounter extends Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  var sum = 0
     |  def count(num1: Int , num2: Int): Unit = sum = num1 + num2
     |  def getSum = sum
     | }
defined class MyCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;trait 的 super 由於是動態的所以 with 的順序不同會影響 super 最後的結果，所以又稱 stackable modifications (堆疊修飾) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   def count(num1: Int , num2: Int) : Unit
     | }
defined class Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyCounter extends Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   var sum = 0
     |   def count(num1: Int , num2: Int): Unit = sum = num1 * num2
     |   def getSum = sum
     | }
defined class MyCounter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Counter1 extends MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   abstract override def count(num1:Int , num2:Int) = {
     |     if(num1 &amp;lt; 0 || num2 &amp;lt; 0) {
     |       super.count(num1,num2)
     |     } else {
     |       sum = num1 + num2
     |     }
     |   }
     | }
defined trait Counter1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Filter1 extends MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   abstract override def count(num1:Int , num2:Int) = {
     |     if(num1 &amp;lt; 0 || num2 &amp;lt; 0) {
     |       super.count(num1,num2)
     |     } else {
     |       sum = num1 + num2 * 2
     |     }
     |   }
     | }
defined trait Filter1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;stackable modifications 會從最右邊開始，例如下面 coutner1 這個物件，
Filter1 的 super 會呼叫 Counter1 的 method ，Counter1 的 super 會呼叫 MyCounter 的 method :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new MyCounter with Counter1 with Filter1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;counter1: MyCounter with Counter1 with Filter1 = $&lt;/span&gt;anon&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;@a5e8260
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.sum
&lt;span class=&quot;go&quot;&gt;res1: Int = 5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.sum
&lt;span class=&quot;go&quot;&gt;res3: Int = -10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;counter2 這個物件，Counter1 的 super 會呼叫 Filter1 的 method ，Filter1 的 super 會呼叫 MyCounter 的 method :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new MyCounter with Filter1 with Counter1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;counter2: MyCounter with Filter1 with Counter1 = $&lt;/span&gt;anon&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;@167bb934
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.sum
&lt;span class=&quot;go&quot;&gt;res7: Int = 3

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.sum
&lt;span class=&quot;go&quot;&gt;res9: Int = -2

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala trait 的功能跟 abstract class 差不多，但我覺得 trait 可以多重繼承跟實作具體的方法就比 abstract class 好用很多了．
感覺像是 java interface 的加強版．雖然抽象類別有建構子可以初始化參數，但其實 trait 也可以提供方法傳遞即可．scala 提供了許多 java 額外的東西，
所以寫法更豐富，或許這也是其中一種理由讓它可以實作OOP(物件導向)也可以實作FP(函數式)．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">traits VS abstract class 抽象類別跟 trait 其實很像，跟 trait 還是有一些差異 :</summary></entry><entry><title type="html">Scala day 14 (traits)</title><link href="http://localhost:4000/scala/2017/12/05/scala_day14.html" rel="alternate" type="text/html" title="Scala day 14 (traits)" /><published>2017-12-05T10:44:17+08:00</published><updated>2017-12-05T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/05/scala_day14</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/05/scala_day14.html">&lt;h3 id=&quot;traits&quot;&gt;traits&lt;/h3&gt;
&lt;p&gt;在 scala 裡類別也是單一繼承，但是可以有多個特徵(trait)． 類別可以 extends 特徵(trait)或 extends 並且 with 特徵(trait)．&lt;/p&gt;

&lt;p&gt;定義一個特徵 Fly :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Fly &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def flying(name:String) = name + &quot; is flying...&quot;
     | }
defined trait Fly
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;trait 不可被 new :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val f &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Fly
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:12: error: trait Fly is abstract&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; cannot be instantiated
&lt;span class=&quot;go&quot;&gt;       val f = new Fly
               ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;鳥類會飛所以 extends Fly :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Fly
&lt;span class=&quot;go&quot;&gt;defined class Birds

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val bird &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Birds
&lt;span class=&quot;go&quot;&gt;bird: Birds = Birds@13bdf540

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bird.flying&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res0: String = bird is flying...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再來定義一個類別 Machine， 飛機是 Machine 並且會 Fly，
所以類別 Airplane extends Machine with Fly :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Machine
&lt;span class=&quot;go&quot;&gt;defined class Machine

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Airplane extends Machine with Fly
&lt;span class=&quot;go&quot;&gt;defined class Airplane

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val air &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Airplane
&lt;span class=&quot;go&quot;&gt;air: Airplane = Airplane@152e7703

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; air.flying&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;air plane&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res1: String = air plane is flying...

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在定義一個類別 Animal 及特徵 Eat 並且定義了一個未實作的 method eat :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Eat &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def eat
     | }
defined trait Eat

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Animal
&lt;span class=&quot;go&quot;&gt;defined class Animal
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;當特徵有定義未實作的 method 時，不管是 extends 或 with 它的類別都必須實作它的方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Animal with Fly with Eat
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: class Birds needs to be abstract, since method eat &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Eat of &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Unit is not defined
&lt;span class=&quot;go&quot;&gt;       class Birds extends Animal with Fly with Eat
             ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這邊重新定義類別 Birds 由於鳥是 Animal 而且會飛又會吃，所以 Birds extends Animal with Fly with Eat，
實作方法時前面可以加上 override 也可以不用加，但繼承的類別已經實作過的在 scala 裡就要加 override :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Animal with Fly with Eat &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def eat = println(&quot;Birds eating&quot;)
     | }
defined class Birds

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Animal with Fly with Eat &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  override def eat = println(&quot;Birds eating&quot;)
     | }
defined class Birds

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val bird &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Birds
&lt;span class=&quot;go&quot;&gt;bird: Birds = Birds@53ccbc15

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bird.flying&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res3: String = bird is flying...

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bird.eat
&lt;span class=&quot;go&quot;&gt;Birds eating
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果不實作，不然就需宣告成抽象類別(abstract class) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Birds extends Animal with Fly with Eat
&lt;span class=&quot;go&quot;&gt;defined class Birds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 trait 有點類似 java 的 interface，可以用來定義方法的規格(尚未實作)及幫類別定義型態，
但又多了一個可以定義具體的方法(已實作)．跟抽象類別有點類似&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">traits 在 scala 裡類別也是單一繼承，但是可以有多個特徵(trait)． 類別可以 extends 特徵(trait)或 extends 並且 with 特徵(trait)．</summary></entry><entry><title type="html">Scala day 13 (case classes &amp;amp; compare)</title><link href="http://localhost:4000/scala/2017/12/04/scala_day13.html" rel="alternate" type="text/html" title="Scala day 13 (case classes &amp; compare)" /><published>2017-12-04T09:44:17+08:00</published><updated>2017-12-04T09:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/04/scala_day13</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/04/scala_day13.html">&lt;h3 id=&quot;case-classes&quot;&gt;case classes&lt;/h3&gt;
&lt;p&gt;case classe 其實跟一般的 class 差不多，只是在建立物件時不用使用 new，
然後建構子的參數都是val，不可修改但可以直接存取．所以當有很多資訊要存時可以用 case classe 封裝．
還有一個優點就是比較方便．
&lt;br /&gt;&lt;br /&gt;
定義 case classe 只要在 class 前面加上 &lt;strong&gt;case&lt;/strong&gt; 關鍵字即可 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,tel:String&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;def echoMsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class Student

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s1: Student = Student(1,Daniel,123)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; s1.name
&lt;span class=&quot;go&quot;&gt;res10: String = Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; s1.echoMsg
&lt;span class=&quot;go&quot;&gt;Hi
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;case-classe-的-copy-&quot;&gt;case classe 的 copy :&lt;/h4&gt;
&lt;p&gt;可以 copy 一份新的物件出來 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s1: Student = Student(1,Sam,456)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s1.copy&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s2: Student = Student(1,Sam,456)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;copy 時還可以更新指定的值(更新id)，其他的值會自動複製 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s3 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s1.copy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s3: Student = Student(2,Sam,456)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;scala-的-eq--equals--&quot;&gt;scala 的 eq , equals , ==&lt;/h4&gt;
&lt;p&gt;對 copy 的物件與原來的物件作比較 :&lt;br /&gt;
&lt;strong&gt;eq&lt;/strong&gt;&lt;br /&gt;
是用來比對 reference，由於兩個物件不一樣所以會是 false :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s1 eq s2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;equals&lt;/strong&gt;&lt;br /&gt;
用來比對物件的值，要比對物件的值是否相等要實作 equals 和 hashCode 兩個方法，
但如果使用 case classe 預設已經實作好了，所以可以直接比較，這邊內容一樣所以為 true :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s1 equals s2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt;&lt;br /&gt;
一般是用 equals 但如果是比對 null 的話是用 eq :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s1 &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; s2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;case-classe-搭配-match-expression&quot;&gt;case classe 搭配 match expression&lt;/h4&gt;
&lt;p&gt;比對值 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,tel:String&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   def echoMsg = println(&quot;Hi&quot;)
     | }
defined class Student

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def chekStudent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s: Student&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case Student(&quot;1&quot;,&quot;Daniel&quot;,&quot;123&quot;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;student1&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case Student(&quot;2&quot;,&quot;Sam&quot;,&quot;456&quot;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;student2&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case Student(&quot;3&quot;,&quot;Jack&quot;,&quot;789&quot;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;student3&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   }
chekStudent: (s: Student)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; chekStudent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res12: String = student2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比對型態 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class People
&lt;span class=&quot;go&quot;&gt;defined class People

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; extends People
&lt;span class=&quot;go&quot;&gt;defined class Student

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Teacher&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; extends People
&lt;span class=&quot;go&quot;&gt;defined class Teacher

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; extends People
&lt;span class=&quot;go&quot;&gt;defined class Employee

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s: People&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Student() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Student&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Teacher() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Teacher&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Employee() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Employee&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
checkPeople: (s: People)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s: People&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Student() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Student&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Teacher() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Teacher&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Employee() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Employee&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
checkPeople: (s: People)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Teacher&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;this is Teacher

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Employee&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;this is Employee

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 case classes 使用上感覺很像 java 存資料時都會封裝成一個 bean 物件．
而且又實作了 equals 和 hashCode 兩個方法，比對也很方便，再搭配 Match Expression 使用起來真得很方便．&lt;/li&gt;
  &lt;li&gt;compare :
    &lt;ol&gt;
      &lt;li&gt;比對值時用 equals&lt;/li&gt;
      &lt;li&gt;比對 reference 時用 eq&lt;/li&gt;
      &lt;li&gt;== 一般是用 equals ，但如果是比對 null 的話是用 eq&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">case classes case classe 其實跟一般的 class 差不多，只是在建立物件時不用使用 new， 然後建構子的參數都是val，不可修改但可以直接存取．所以當有很多資訊要存時可以用 case classe 封裝． 還有一個優點就是比較方便． 定義 case classe 只要在 class 前面加上 case 關鍵字即可 :</summary></entry><entry><title type="html">Scala day 12 (Match Expression)</title><link href="http://localhost:4000/scala/2017/12/04/scala_day12.html" rel="alternate" type="text/html" title="Scala day 12 (Match Expression)" /><published>2017-12-04T09:44:17+08:00</published><updated>2017-12-04T09:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/04/scala_day12</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/04/scala_day12.html">&lt;h3 id=&quot;match-expression&quot;&gt;Match Expression&lt;/h3&gt;
&lt;p&gt;Match 可以幫我們省略寫很多 if else，而且可以比對不同型態．&lt;br /&gt;
scala 的 match 不用寫 break 只會執行符合的那一段，然後 default 是用 _ :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; num match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 1 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 2 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 3 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;three&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
     |}
getNumber: (num: Int)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res83: String = two

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;要判斷符合多個條件時使用 | :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; num match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 1 | 3 | 5 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;odd&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 2 | 4 | 6 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;evens&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  }
     | }
getNumber: (num: Int)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res86: String = evens

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res87: String = odd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;將 match 的結果指定給變數 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; var i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6
&lt;span class=&quot;go&quot;&gt;i: Int = 6

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val month &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; i match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 1 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;January&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 2 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;February&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 3 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;March&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 4 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;April&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 5 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;May&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 6 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;June&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 7 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;July&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 8 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;August&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 9 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;September&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 10 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;October&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 11 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;November&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 12 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;December&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid month&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
month: String = June

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;month&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;June
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;match 還可以比對不同的型態非常強大 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: Any&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; x match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case true =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;truth&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 'a' | 'A' =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is a&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case x :: xs =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;List&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case Nil =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;empty List&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
getMultiType: (x: Any)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res88: String = empty List

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res89: String = List

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res90: String = truth
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Any 是 scala 所有型態的父類別，底下又分為兩個子類別 AnyVal 和 AnyRef．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再來看更多例子，可以將 Any 對應到的型態，並取得裡面的值 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: Any&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: String &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; x match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case List(0, _, _) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;List has three element first is 0 &quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case List(1, _*) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;List element size is dynamic &quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case (a, b) =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;Tuple2 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case (a, b, c) =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;Tuple2 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, and &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case s: String =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this is string: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case i: Int =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this is int: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case f: Float =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this is float: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case a: Array[Int] =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;an array of int: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.mkString(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case as: Array[String] =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;an array of strings: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.mkString(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case list: List[_] =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this the List: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; m: Map[_, _] &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; m.toString
&lt;span class=&quot;gp&quot;&gt;     |   case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
getMultiMatchType: (x: Any)String


&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res91: String = &quot;List has three element first is 0 &quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res92: String = &quot;List element size is dynamic &quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3,4&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res93: String = &quot;List element size is dynamic &quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res94: String = this the List: List(0, 1, 2, 3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res1: String = Tuple2 1 and 2

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;0,1,2&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res2: String = Tuple2 0, 1, and 2

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res3: String = this is int: 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res4: String = an array of int: 1,2,3

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res5: String = an array of strings: 1,2,3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 Match Expression 可以比對&lt;strong&gt;值&lt;/strong&gt;及&lt;strong&gt;型態&lt;/strong&gt;非常強大．&lt;/li&gt;
  &lt;li&gt;scala 的 Any 是 scala 所有型態的父類別，底下又分為兩個子類別 AnyVal 和 AnyRef．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Match Expression Match 可以幫我們省略寫很多 if else，而且可以比對不同型態． scala 的 match 不用寫 break 只會執行符合的那一段，然後 default 是用 _ : ```console scala&amp;gt; def getNumber(num:Int) = { num match { | case 1 =&amp;gt; “one” | case 2 =&amp;gt; “two” | case 3 =&amp;gt; “three” | case _ =&amp;gt; “” | } |} getNumber: (num: Int)String</summary></entry><entry><title type="html">Scala day 11 (Loop &amp;amp; break &amp;amp; continue)</title><link href="http://localhost:4000/scala/2017/12/04/scala_day11.html" rel="alternate" type="text/html" title="Scala day 11 (Loop &amp; break &amp; continue)" /><published>2017-12-04T08:44:17+08:00</published><updated>2017-12-04T08:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/04/scala_day11</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/04/scala_day11.html">&lt;h3 id=&quot;while--dowhile&quot;&gt;while &amp;amp; do…while&lt;/h3&gt;
&lt;p&gt;while 和 do…while 用法和 java 差不多，條件都是放 boolean 值即可 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; var i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;go&quot;&gt;i: Int = 0

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  println(i)
     |  i = i + 1
     | }
0
1
2
3
4

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  println(i)
     |  i = i + 1
     | } while(i &amp;lt; 5)
0
1
2
3
4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;scala-no-break--no-continue&quot;&gt;scala no break &amp;amp; no continue&lt;/h3&gt;
&lt;p&gt;scala 沒有提供 break 及 continue 這兩個關鍵字使用，所以需使用其他寫法來替代．&lt;br /&gt;
需要 import scala.util.control.Breaks 套件的 breakable 及 break :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.util.control.Breaks.breakable
&lt;span class=&quot;go&quot;&gt;import scala.util.control.Breaks.breakable

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.util.control.Breaks.break
&lt;span class=&quot;go&quot;&gt;import scala.util.control.Breaks.break
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 breakable 區塊替代 break，下面例子 i == 3 就會 break :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; var i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;go&quot;&gt;i: Int = 0

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; breakable &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  while(i &amp;lt; 5) {
     |   if(i == 3) {
     |    break
     |   }
     |   println(i)
     |   i = i + 1
     |  }
     | }
0
1
2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 breakable 區塊替代 continue，下面例子 i == 3 就會 continue 不 println :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  breakable {
     |   if(i == 3) {
     |    break
     |   }
     |   println(i)
     |  }
     |  i = i + 1
     | }
0
1
2
4

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以利用 breakable 區塊的位置可以達到 break 及 continue 的效果．
下面例子是使用 scala.util.control.Breaks 物件，搭配混合使用，偶數的話 continue , i == 7 時就 break :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.util.control.Breaks
&lt;span class=&quot;go&quot;&gt;import scala.util.control.Breaks

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val breakobj &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Breaks
&lt;span class=&quot;go&quot;&gt;breakobj: scala.util.control.Breaks = scala.util.control.Breaks@5284ae6e

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val continuobj &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Breaks
&lt;span class=&quot;go&quot;&gt;continuobj: scala.util.control.Breaks = scala.util.control.Breaks@1bcf8661

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; breakobj.breakable &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  while (i &amp;lt; 10) {
     |   continuobj.breakable {
     |    if (i % 2 == 0) {
     |     continuobj.break
     |    } else if(i == 7) {
     |     breakobj.break
     |    }
     |    println(i)
     |   }
     |   i = i + 1
     |  }
     | }
1
3
5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 沒有提供 break 和 continue，但還是可以運用 breakable 來實作出來．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">while &amp;amp; do…while while 和 do…while 用法和 java 差不多，條件都是放 boolean 值即可 :</summary></entry></feed>