<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-07T18:26:45+08:00</updated><id>http://localhost:4000/</id><title type="html">Daniel’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Scala day 16 (traits self type)</title><link href="http://localhost:4000/scala/2017/12/07/scala_day16.html" rel="alternate" type="text/html" title="Scala day 16 (traits self type)" /><published>2017-12-07T10:44:17+08:00</published><updated>2017-12-07T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/07/scala_day16</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/07/scala_day16.html">&lt;h3 id=&quot;self-types&quot;&gt;Self types&lt;/h3&gt;
&lt;p&gt;Self types 使用的符號是 =&amp;gt;&lt;br /&gt;
Self types 的作用是把不同的 trait 混合(mixed)在一起，並且定義了要 with 它的話，也必須同時具有它 this 的 trait :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Ids &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val id = &quot;ids&quot;
     |  def getId : String
     | }
defined trait Ids

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val name = &quot;names&quot;
     |  def getName : String
     | }
defined trait Names
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this 只能有一個，所以要多個 Self types 要使用 with :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Users &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  this : Ids with Names =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val user = &quot;user&quot;
     |  def getUser : String
     | }
defined trait Users
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定義一個 class 去 extends Users，這時候會出錯，因為使用 Self types 的 trait 等於強迫定義了如果要 with 它時，也一定要 with 它所混合的 trait．
這邊 Users 的 Self types 有 Ids 與 Names，所以類別 Customer 也要 with Ids 與 Names :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,user:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:12: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; self-type Customer does not conform to Users's selftype Users with Ids with Names
       class Customer(id:String,name:String,user:String) extends Users
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果 class 的變數名稱如果與 trait 的變數相同會產生衝突，所以要注意(Ids已有id,Names已有name,Users已有user) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,user:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users with Ids with Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def getId = id
     |  def getName = name
     |  def getUser = user
     | }
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt; requires field but conflicts with value id &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Ids
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                      ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; requires field but conflicts with value name &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Names
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                                ^
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: parameter &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt; requires field but conflicts with value user &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Users
&lt;span class=&quot;go&quot;&gt;       class Customer(id:String,name:String,user:String) extends Users with Ids with Names {
                                            ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;把變數名稱改掉 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cid:String,cname:String,cuser:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; extends Users with Ids with Names &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def getId = cid
     |  def getName = cname
     |  def getUser = cuser
     | }
defined class Customer

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val cu &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Customer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;user1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cu: Customer = Customer@3a62fa79

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; cu.getId
&lt;span class=&quot;go&quot;&gt;res4: String = 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; cu.id
&lt;span class=&quot;go&quot;&gt;res7: String = ids

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;self-types-定義-function&quot;&gt;Self types 定義 function&lt;/h3&gt;
&lt;p&gt;Self types 也可以定義 with 它的類別一定也要具有 Self types 定義好的方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  this : {
     |   def count(mum1:Int,num2:Int): Unit
     |   def getSum: Int
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     |  } =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
defined trait Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  this : Counter =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
defined trait MyCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;沒實作方法的話，就會出錯 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class RealCounter extends MyCounter with Counter
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; self-type RealCounter does not conform to Counter's selftype Counter with AnyRef{def count(mum1: Int,num2: Int): Unit;&lt;/span&gt; def getSum: Int&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;       class RealCounter extends MyCounter with Counter
                                                ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再來做個實驗，如果是 abstract class，沒定義的話還是會出錯，但可以不用在 abstract class 實作出方法，可以先定義成抽象方法，就可以過了 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class RealCounter extends MyCounter with Counter
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:13: error: illegal inheritance&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; self-type RealCounter does not conform to Counter's selftype Counter with AnyRef{def count(mum1: Int,num2: Int): Unit;&lt;/span&gt; def getSum: Int&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;       abstract class RealCounter extends MyCounter with Counter
                                                         ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class RealCounter extends MyCounter with Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def count(num1:Int,num2:Int): Unit
     |  def getSum: Int
     | }
defined class RealCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後還是乖乖實作方法吧 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class RealCounter extends MyCounter with Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  var sum = 0
     |  def count(num1:Int , num2:Int):Unit = sum = num1 + num2
     |  def getSum = sum
     | }
defined class RealCounter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new RealCounter
&lt;span class=&quot;go&quot;&gt;counter: RealCounter = RealCounter@5e585461

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter.getSum
&lt;span class=&quot;go&quot;&gt;res9: Int = 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;trait 本身其實已經是在定義方法及型態了，所以 Self types 概念上好像差不多．差異是不用寫很多 extends 和 with 定義在 this 裡就好．
雖然現在還沒了解它的好處，不過可以先玩玩看．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Self types Self types 使用的符號是 =&amp;gt; Self types 的作用是把不同的 trait 混合(mixed)在一起，並且定義了要 with 它的話，也必須同時具有它 this 的 trait :</summary></entry><entry><title type="html">Scala day 15 (traits &amp;amp; abstract class)</title><link href="http://localhost:4000/scala/2017/12/06/scala_day15.html" rel="alternate" type="text/html" title="Scala day 15 (traits &amp; abstract class)" /><published>2017-12-06T10:44:17+08:00</published><updated>2017-12-06T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/06/scala_day15</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/06/scala_day15.html">&lt;h3 id=&quot;traits-vs-abstract-class&quot;&gt;traits VS abstract class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;抽象類別跟 trait 其實很像，跟 trait 還是有一些差異 :&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;抽象類別只能被單一繼承trait-可以被單一繼承又可以-with-多個&quot;&gt;抽象類別只能被單一繼承，trait 可以被單一繼承又可以 with 多個&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class A
&lt;span class=&quot;go&quot;&gt;defined class A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class B
&lt;span class=&quot;go&quot;&gt;defined class B

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C extends A
&lt;span class=&quot;go&quot;&gt;defined class C


&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait A
&lt;span class=&quot;go&quot;&gt;defined trait A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait B
&lt;span class=&quot;go&quot;&gt;defined trait B

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C extends A with B
&lt;span class=&quot;go&quot;&gt;defined class C
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;記得使用 with trait 要先 extends 才可以&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class C with A with B
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt; expected but &lt;span class=&quot;s1&quot;&gt;'with'&lt;/span&gt; found.
&lt;span class=&quot;go&quot;&gt;       class C with A with B
               ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;抽象類別有建構子trait-沒有&quot;&gt;抽象類別有建構子，trait 沒有&lt;/h4&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;cala&amp;gt;&lt;/span&gt; abstract class Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class Employee

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: traits or objects may not have parameters
&lt;span class=&quot;go&quot;&gt;       trait Employee(id:String,name:String)
                     ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;抽象類別的-super-vs-trait-的-super&quot;&gt;抽象類別的 super VS trait 的 super&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;抽象類別的super是靜態呼叫父類別的方法，trait 是由於可以 with 多個所以 super 是動態的無法知道是哪個父類別，只有在建立類別時才會知道．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;抽象類別的 super :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def count(num1: Int , num2: Int) : Unit
     | }
defined class Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyCounter extends Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  var sum = 0
     |  def count(num1: Int , num2: Int): Unit = sum = num1 + num2
     |  def getSum = sum
     | }
defined class MyCounter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;trait 的 super 由於是動態的所以 with 的順序不同會影響 super 最後的結果，所以又稱 stackable modifications (堆疊修飾) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   def count(num1: Int , num2: Int) : Unit
     | }
defined class Counter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class MyCounter extends Counter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   var sum = 0
     |   def count(num1: Int , num2: Int): Unit = sum = num1 * num2
     |   def getSum = sum
     | }
defined class MyCounter

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Counter1 extends MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   abstract override def count(num1:Int , num2:Int) = {
     |     if(num1 &amp;lt; 0 || num2 &amp;lt; 0) {
     |       super.count(num1,num2)
     |     } else {
     |       sum = num1 + num2
     |     }
     |   }
     | }
defined trait Counter1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Filter1 extends MyCounter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   abstract override def count(num1:Int , num2:Int) = {
     |     if(num1 &amp;lt; 0 || num2 &amp;lt; 0) {
     |       super.count(num1,num2)
     |     } else {
     |       sum = num1 + num2 * 2
     |     }
     |   }
     | }
defined trait Filter1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;stackable modifications 會從最右邊開始，例如下面 coutner1 這個物件，
Filter1 的 super 會呼叫 Counter1 的 method ，Counter1 的 super 會呼叫 MyCounter 的 method :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new MyCounter with Counter1 with Filter1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;counter1: MyCounter with Counter1 with Filter1 = $&lt;/span&gt;anon&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;@a5e8260
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.sum
&lt;span class=&quot;go&quot;&gt;res1: Int = 5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter1.sum
&lt;span class=&quot;go&quot;&gt;res3: Int = -10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;counter2 這個物件，Counter1 的 super 會呼叫 Filter1 的 method ，Filter1 的 super 會呼叫 MyCounter 的 method :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val counter2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new MyCounter with Filter1 with Counter1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;counter2: MyCounter with Filter1 with Counter1 = $&lt;/span&gt;anon&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;@167bb934
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.sum
&lt;span class=&quot;go&quot;&gt;res7: Int = 3

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; counter2.sum
&lt;span class=&quot;go&quot;&gt;res9: Int = -2

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;在 scala trait 的功能跟 abstract class 差不多，但我覺得 trait 可以多重繼承跟實作具體的方法就比 abstract class 好用很多了．
感覺像是 java interface 的加強版．雖然抽象類別有建構子可以初始化參數，但其實 trait 也可以提供方法傳遞即可．scala 提供了許多 java 額外的東西，
所以寫法更豐富，或許這也是其中一種理由讓它可以實作OOP(物件導向)也可以實作FP(函數式)．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">traits VS abstract class 抽象類別跟 trait 其實很像，跟 trait 還是有一些差異 :</summary></entry><entry><title type="html">Scala day 14 (traits)</title><link href="http://localhost:4000/scala/2017/12/05/scala_day14.html" rel="alternate" type="text/html" title="Scala day 14 (traits)" /><published>2017-12-05T10:44:17+08:00</published><updated>2017-12-05T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/05/scala_day14</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/05/scala_day14.html">&lt;h3 id=&quot;traits&quot;&gt;traits&lt;/h3&gt;
&lt;p&gt;在 scala 裡類別也是單一繼承，但是可以有多個特徵(trait)． 類別可以 extends 特徵(trait)或 extends 並且 with 特徵(trait)．&lt;/p&gt;

&lt;p&gt;定義一個特徵 Fly :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Fly &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def flying(name:String) = name + &quot; is flying...&quot;
     | }
defined trait Fly
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;trait 不可被 new :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val f &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Fly
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:12: error: trait Fly is abstract&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; cannot be instantiated
&lt;span class=&quot;go&quot;&gt;       val f = new Fly
               ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;鳥類會飛所以 extends Fly :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Fly
&lt;span class=&quot;go&quot;&gt;defined class Birds

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val bird &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Birds
&lt;span class=&quot;go&quot;&gt;bird: Birds = Birds@13bdf540

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bird.flying&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res0: String = bird is flying...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;再來定義一個類別 Machine， 飛機是 Machine 並且會 Fly，
所以類別 Airplane extends Machine with Fly :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Machine
&lt;span class=&quot;go&quot;&gt;defined class Machine

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Airplane extends Machine with Fly
&lt;span class=&quot;go&quot;&gt;defined class Airplane

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val air &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Airplane
&lt;span class=&quot;go&quot;&gt;air: Airplane = Airplane@152e7703

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; air.flying&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;air plane&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res1: String = air plane is flying...

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在定義一個類別 Animal 及特徵 Eat 並且定義了一個未實作的 method eat :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; trait Eat &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def eat
     | }
defined trait Eat

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Animal
&lt;span class=&quot;go&quot;&gt;defined class Animal
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;當特徵有定義未實作的 method 時，不管是 extends 或 with 它的類別都必須實作它的方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Animal with Fly with Eat
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:14: error: class Birds needs to be abstract, since method eat &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;trait Eat of &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Unit is not defined
&lt;span class=&quot;go&quot;&gt;       class Birds extends Animal with Fly with Eat
             ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這邊重新定義類別 Birds 由於鳥是 Animal 而且會飛又會吃，所以 Birds extends Animal with Fly with Eat，
實作方法時前面可以加上 override 也可以不用加 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Animal with Fly with Eat &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def eat = println(&quot;Birds eating&quot;)
     | }
defined class Birds

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Birds extends Animal with Fly with Eat &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  override def eat = println(&quot;Birds eating&quot;)
     | }
defined class Birds

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val bird &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Birds
&lt;span class=&quot;go&quot;&gt;bird: Birds = Birds@53ccbc15

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bird.flying&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res3: String = bird is flying...

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; bird.eat
&lt;span class=&quot;go&quot;&gt;Birds eating
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果不實作，不然就需宣告成抽象類別(abstract class) :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; abstract class Birds extends Animal with Fly with Eat
&lt;span class=&quot;go&quot;&gt;defined class Birds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 trait 有點類似 java 的 interface，可以用來 :
    &lt;ol&gt;
      &lt;li&gt;定義方法的規格(尚未實作)&lt;/li&gt;
      &lt;li&gt;幫類別定義型態(同類型的類別都具有同樣的特徵)，&lt;/li&gt;
      &lt;li&gt;但又多了可以定義具體的方法(已實作)．&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">traits 在 scala 裡類別也是單一繼承，但是可以有多個特徵(trait)． 類別可以 extends 特徵(trait)或 extends 並且 with 特徵(trait)．</summary></entry><entry><title type="html">Scala day 13 (case classes &amp;amp; compare)</title><link href="http://localhost:4000/scala/2017/12/04/scala_day13.html" rel="alternate" type="text/html" title="Scala day 13 (case classes &amp; compare)" /><published>2017-12-04T09:44:17+08:00</published><updated>2017-12-04T09:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/04/scala_day13</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/04/scala_day13.html">&lt;h3 id=&quot;case-classes&quot;&gt;case classes&lt;/h3&gt;
&lt;p&gt;case classe 其實跟一般的 class 差不多，只是在建立物件時不用使用 new，
然後建構子的參數都是val，不可修改但可以直接存取．所以當有很多資訊要存時可以用 case classe 封裝．
還有一個優點就是比較方便．
&lt;br /&gt;&lt;br /&gt;
定義 case classe 只要在 class 前面加上 &lt;strong&gt;case&lt;/strong&gt; 關鍵字即可 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,tel:String&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;def echoMsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;defined class Student

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s1: Student = Student(1,Daniel,123)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; s1.name
&lt;span class=&quot;go&quot;&gt;res10: String = Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; s1.echoMsg
&lt;span class=&quot;go&quot;&gt;Hi
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;case-classe-的-copy-&quot;&gt;case classe 的 copy :&lt;/h4&gt;
&lt;p&gt;可以 copy 一份新的物件出來 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s1: Student = Student(1,Sam,456)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s1.copy&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s2: Student = Student(1,Sam,456)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;copy 時還可以更新指定的值(更新id)，其他的值會自動複製 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s3 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s1.copy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s3: Student = Student(2,Sam,456)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;scala-的-eq--equals--&quot;&gt;scala 的 eq , equals , ==&lt;/h4&gt;
&lt;p&gt;對 copy 的物件與原來的物件作比較 :&lt;br /&gt;
&lt;strong&gt;eq&lt;/strong&gt;&lt;br /&gt;
是用來比對 reference，由於兩個物件不一樣所以會是 false :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s1 eq s2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;equals&lt;/strong&gt;&lt;br /&gt;
用來比對物件的值，要比對物件的值是否相等要實作 equals 和 hashCode 兩個方法，
但如果使用 case classe 預設已經實作好了，所以可以直接比較，這邊內容一樣所以為 true :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s1 equals s2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt;&lt;br /&gt;
一般是用 equals 但如果是比對 null 的話是用 eq :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s1 &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; s2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;case-classe-搭配-match-expression&quot;&gt;case classe 搭配 match expression&lt;/h4&gt;
&lt;p&gt;比對值 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:String,name:String,tel:String&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   def echoMsg = println(&quot;Hi&quot;)
     | }
defined class Student

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def chekStudent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s: Student&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case Student(&quot;1&quot;,&quot;Daniel&quot;,&quot;123&quot;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;student1&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case Student(&quot;2&quot;,&quot;Sam&quot;,&quot;456&quot;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;student2&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case Student(&quot;3&quot;,&quot;Jack&quot;,&quot;789&quot;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;student3&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |     case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |   }
chekStudent: (s: Student)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; chekStudent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res12: String = student2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比對型態 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class People
&lt;span class=&quot;go&quot;&gt;defined class People

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Student&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; extends People
&lt;span class=&quot;go&quot;&gt;defined class Student

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Teacher&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; extends People
&lt;span class=&quot;go&quot;&gt;defined class Teacher

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; class Employee&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; extends People
&lt;span class=&quot;go&quot;&gt;defined class Employee

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s: People&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Student() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Student&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Teacher() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Teacher&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Employee() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Employee&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
checkPeople: (s: People)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s: People&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Student() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Student&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Teacher() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Teacher&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case Employee() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is Employee&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
checkPeople: (s: People)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Teacher&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;this is Teacher

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;checkPeople&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Employee&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;this is Employee

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 case classes 使用上感覺很像 java 存資料時都會封裝成一個 bean 物件．
而且又實作了 equals 和 hashCode 兩個方法，比對也很方便，再搭配 Match Expression 使用起來真得很方便．&lt;/li&gt;
  &lt;li&gt;compare :
    &lt;ol&gt;
      &lt;li&gt;比對值時用 equals&lt;/li&gt;
      &lt;li&gt;比對 reference 時用 eq&lt;/li&gt;
      &lt;li&gt;== 一般是用 equals ，但如果是比對 null 的話是用 eq&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">case classes case classe 其實跟一般的 class 差不多，只是在建立物件時不用使用 new， 然後建構子的參數都是val，不可修改但可以直接存取．所以當有很多資訊要存時可以用 case classe 封裝． 還有一個優點就是比較方便． 定義 case classe 只要在 class 前面加上 case 關鍵字即可 :</summary></entry><entry><title type="html">Scala day 12 (Match Expression)</title><link href="http://localhost:4000/scala/2017/12/04/scala_day12.html" rel="alternate" type="text/html" title="Scala day 12 (Match Expression)" /><published>2017-12-04T09:44:17+08:00</published><updated>2017-12-04T09:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/04/scala_day12</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/04/scala_day12.html">&lt;h3 id=&quot;match-expression&quot;&gt;Match Expression&lt;/h3&gt;
&lt;p&gt;Match 可以幫我們省略寫很多 if else，而且可以比對不同型態．&lt;br /&gt;
scala 的 match 不用寫 break 只會執行符合的那一段，然後 default 是用 _ :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; num match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 1 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 2 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 3 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;three&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
     |}
getNumber: (num: Int)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res83: String = two

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;要判斷符合多個條件時使用 | :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;num:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; num match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 1 | 3 | 5 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;odd&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 2 | 4 | 6 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;evens&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  }
     | }
getNumber: (num: Int)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res86: String = evens

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getNumber&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res87: String = odd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;將 match 的結果指定給變數 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; var i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6
&lt;span class=&quot;go&quot;&gt;i: Int = 6

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val month &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; i match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 1 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;January&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 2 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;February&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 3 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;March&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 4 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;April&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 5 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;May&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 6 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;June&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 7 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;July&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 8 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;August&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 9 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;September&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 10 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;October&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 11 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;November&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case 12 =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;December&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     | case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid month&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
month: String = June

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;month&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;June
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;match 還可以比對不同的型態非常強大 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: Any&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; x match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case true =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;truth&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case 'a' | 'A' =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is a&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case x :: xs =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;List&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case Nil =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;empty List&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
getMultiType: (x: Any)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res88: String = empty List

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res89: String = List

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res90: String = truth
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Any 是 scala 所有型態的父類別，底下又分為兩個子類別 AnyVal 和 AnyRef．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再來看更多例子，可以將 Any 對應到的型態，並取得裡面的值 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x: Any&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: String &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; x match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case List(0, _, _) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;List has three element first is 0 &quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case List(1, _*) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;List element size is dynamic &quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case (a, b) =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;Tuple2 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case (a, b, c) =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;Tuple2 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, and &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case s: String =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this is string: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case i: Int =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this is int: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case f: Float =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this is float: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case a: Array[Int] =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;an array of int: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.mkString(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case as: Array[String] =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;an array of strings: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.mkString(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |   case list: List[_] =&amp;gt;&lt;/span&gt; s&lt;span class=&quot;s2&quot;&gt;&quot;this the List: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; m: Map[_, _] &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; m.toString
&lt;span class=&quot;gp&quot;&gt;     |   case _ =&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     | }
getMultiMatchType: (x: Any)String


&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res91: String = &quot;List has three element first is 0 &quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res92: String = &quot;List element size is dynamic &quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3,4&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res93: String = &quot;List element size is dynamic &quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res94: String = this the List: List(0, 1, 2, 3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res1: String = Tuple2 1 and 2

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;0,1,2&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res2: String = Tuple2 0, 1, and 2

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res3: String = this is int: 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res4: String = an array of int: 1,2,3

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; getMultiMatchType&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res5: String = an array of strings: 1,2,3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 Match Expression 可以比對&lt;strong&gt;值&lt;/strong&gt;及&lt;strong&gt;型態&lt;/strong&gt;非常強大．&lt;/li&gt;
  &lt;li&gt;scala 的 Any 是 scala 所有型態的父類別，底下又分為兩個子類別 AnyVal 和 AnyRef．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Match Expression Match 可以幫我們省略寫很多 if else，而且可以比對不同型態． scala 的 match 不用寫 break 只會執行符合的那一段，然後 default 是用 _ : ```console scala&amp;gt; def getNumber(num:Int) = { num match { | case 1 =&amp;gt; “one” | case 2 =&amp;gt; “two” | case 3 =&amp;gt; “three” | case _ =&amp;gt; “” | } |} getNumber: (num: Int)String</summary></entry><entry><title type="html">Scala day 11 (Loop &amp;amp; break &amp;amp; continue)</title><link href="http://localhost:4000/scala/2017/12/04/scala_day11.html" rel="alternate" type="text/html" title="Scala day 11 (Loop &amp; break &amp; continue)" /><published>2017-12-04T08:44:17+08:00</published><updated>2017-12-04T08:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/04/scala_day11</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/04/scala_day11.html">&lt;h3 id=&quot;while--dowhile&quot;&gt;while &amp;amp; do…while&lt;/h3&gt;
&lt;p&gt;while 和 do…while 用法和 java 差不多，條件都是放 boolean 值即可 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; var i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;go&quot;&gt;i: Int = 0

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  println(i)
     |  i = i + 1
     | }
0
1
2
3
4

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  println(i)
     |  i = i + 1
     | } while(i &amp;lt; 5)
0
1
2
3
4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;scala-no-break--no-continue&quot;&gt;scala no break &amp;amp; no continue&lt;/h3&gt;
&lt;p&gt;scala 沒有提供 break 及 continue 這兩個關鍵字使用，所以需使用其他寫法來替代．&lt;br /&gt;
需要 import scala.util.control.Breaks 套件的 breakable 及 break :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.util.control.Breaks.breakable
&lt;span class=&quot;go&quot;&gt;import scala.util.control.Breaks.breakable

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.util.control.Breaks.break
&lt;span class=&quot;go&quot;&gt;import scala.util.control.Breaks.break
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 breakable 區塊替代 break，下面例子 i == 3 就會 break :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; var i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;go&quot;&gt;i: Int = 0

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; breakable &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  while(i &amp;lt; 5) {
     |   if(i == 3) {
     |    break
     |   }
     |   println(i)
     |   i = i + 1
     |  }
     | }
0
1
2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 breakable 區塊替代 continue，下面例子 i == 3 就會 continue 不 println :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  breakable {
     |   if(i == 3) {
     |    break
     |   }
     |   println(i)
     |  }
     |  i = i + 1
     | }
0
1
2
4

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以利用 breakable 區塊的位置可以達到 break 及 continue 的效果．
下面例子是使用 scala.util.control.Breaks 物件，搭配混合使用，偶數的話 continue , i == 7 時就 break :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; import scala.util.control.Breaks
&lt;span class=&quot;go&quot;&gt;import scala.util.control.Breaks

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val breakobj &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Breaks
&lt;span class=&quot;go&quot;&gt;breakobj: scala.util.control.Breaks = scala.util.control.Breaks@5284ae6e

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val continuobj &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Breaks
&lt;span class=&quot;go&quot;&gt;continuobj: scala.util.control.Breaks = scala.util.control.Breaks@1bcf8661

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; breakobj.breakable &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  while (i &amp;lt; 10) {
     |   continuobj.breakable {
     |    if (i % 2 == 0) {
     |     continuobj.break
     |    } else if(i == 7) {
     |     breakobj.break
     |    }
     |    println(i)
     |   }
     |   i = i + 1
     |  }
     | }
1
3
5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 沒有提供 break 和 continue，但還是可以運用 breakable 來實作出來．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">while &amp;amp; do…while while 和 do…while 用法和 java 差不多，條件都是放 boolean 值即可 :</summary></entry><entry><title type="html">Scala day 10 (Loop)</title><link href="http://localhost:4000/scala/2017/12/01/scala_day10.html" rel="alternate" type="text/html" title="Scala day 10 (Loop)" /><published>2017-12-01T09:44:17+08:00</published><updated>2017-12-01T09:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/01/scala_day10</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/01/scala_day10.html">&lt;h4 id=&quot;scala-迴圈的寫法很多種但這邊大概整理成-4-項根據需求來決定要使用哪種寫法-&quot;&gt;scala 迴圈的寫法很多種，但這邊大概整理成 4 項，根據需求來決定要使用哪種寫法 :&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;循序取得 collection 元素．&lt;/li&gt;
  &lt;li&gt;需要有 index 取得 collection 元素．&lt;/li&gt;
  &lt;li&gt;需要多個計數器時．&lt;/li&gt;
  &lt;li&gt;迴圈需要產生一組新個 collection 物件．&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;循序取得-collection-元素&quot;&gt;循序取得 collection 元素．&lt;/h4&gt;
&lt;p&gt;for&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Andy&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;names: Array[String] = Array(Andy, Jack, Sam, Daniel)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name &amp;lt;- names&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Andy
Jack
Sam
Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name &amp;lt;- names&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  var upperName = name.toUpperCase
     |  println(upperName)
     | }
ANDY
JACK
SAM
DANIEL
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;foreach&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names.foreach&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;println&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Andy
Jack
Sam
Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; 1.to&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.foreach&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;println&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1
2
3
4
5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 to 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.foreach&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;println&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1
2
3
4
5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 withFilter 過濾元素&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; names.withFilter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.foreach&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;println&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Andy
Jack
Daniel
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;需要有-index-取得-collection-元素&quot;&gt;需要有 index 取得 collection 元素&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使用 until&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt;- 0 &lt;span class=&quot;k&quot;&gt;until &lt;/span&gt;newNames.length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  println(s&quot;$&lt;/span&gt;i is &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;newNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(i)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;)
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;     | }
0 is ANDY
1 is JACK
2 is SAM
3 is DANIEL
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;迴圈搭配條件式 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt;-&amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;-&amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;a3&quot;&lt;/span&gt;-&amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;a4&quot;&lt;/span&gt;-&amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt;- 0 &lt;span class=&quot;k&quot;&gt;until &lt;/span&gt;names.length &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;names&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;._2 &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  println(names(i))
     | }
(a1,Sam)
(a3,Jack)
(a4,Ray)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用 zip 與 zipWithIndex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zip 可指定 index 開始的數字，zipWithIndex 則是從 0 開始 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;element , index&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;- newNames.zip&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Stream from 5&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  println(s&quot;$&lt;/span&gt;index is &lt;span class=&quot;nv&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;)
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;     | }
5 is ANDY
6 is JACK
7 is SAM
8 is DANIEL

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;element , index&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;- newNames.zipWithIndex&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     |  println(s&quot;$&lt;/span&gt;index is &lt;span class=&quot;nv&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;)
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;     | }
0 is ANDY
1 is JACK
2 is SAM
3 is DANIEL
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;collection 的資料是 Tuple2 的話 :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val days &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;,0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Monday&quot;&lt;/span&gt;,1&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;days: Array[(String, Int)] = Array((Sunday,0), (Monday,1))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; days.zipWithIndex.foreach &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;day &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;._1._1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;._1._2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; , index is &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;._2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Sunday is 0 , index is 0
Monday is 1 , index is 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;需要多個計數器時&quot;&gt;需要多個計數器時&lt;/h4&gt;
&lt;p&gt;for 迴圈多個計數器變數的寫法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &amp;lt;- 1 to 3&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;j &amp;lt;- &lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt; to &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;k &amp;lt;- 8 to 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;println&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;s2&quot;&gt;&quot; i=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; , j=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; , k=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; i=1 , j=-2 , k=8
 i=1 , j=-2 , k=9
 i=1 , j=-2 , k=10
 i=1 , j=-1 , k=8
 i=1 , j=-1 , k=9
 i=1 , j=-1 , k=10
 i=2 , j=-2 , k=8
 i=2 , j=-2 , k=9
 i=2 , j=-2 , k=10
 i=2 , j=-1 , k=8
 i=2 , j=-1 , k=9
 i=2 , j=-1 , k=10
 i=3 , j=-2 , k=8
 i=3 , j=-2 , k=9
 i=3 , j=-2 , k=10
 i=3 , j=-1 , k=8
 i=3 , j=-1 , k=9
 i=3 , j=-1 , k=10


&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  i &amp;lt;- -3 to 0
     |  j &amp;lt;- 1 to 3
     |  if i != 2 &amp;amp;&amp;amp; j != 2
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     | } println(s&quot;i = $&lt;/span&gt;i , j &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;)
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;i = -3 , j = 1
i = -3 , j = 3
i = -2 , j = 1
i = -2 , j = 3
i = -1 , j = 1
i = -1 , j = 3
i = 0 , j = 1
i = 0 , j = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;迴圈需要產生一組新個-collection-物件&quot;&gt;迴圈需要產生一組新個 collection 物件&lt;/h4&gt;
&lt;p&gt;透過 Loop 及 yield 處理過元素後，可產生新的 collection :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val newNames &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name &amp;lt;- names&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; yield name.toUpperCase
&lt;span class=&quot;go&quot;&gt;newNames: Array[String] = Array(ANDY, JACK, SAM, DANIEL)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala Loop 的寫法跟 java 比較 :&lt;br /&gt;
java :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for(int i = 0 ; i &amp;lt; e.length ; i++) ...
for(String name : names) ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;scala :&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for(i &amp;lt;- 0 until e.length) ...
for(name &amp;lt;- names) ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;迴圈的寫法很多種，但主要還是根據需求來決定．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">scala 迴圈的寫法很多種，但這邊大概整理成 4 項，根據需求來決定要使用哪種寫法 : 循序取得 collection 元素． 需要有 index 取得 collection 元素． 需要多個計數器時． 迴圈需要產生一組新個 collection 物件．</summary></entry><entry><title type="html">Scala day 9 (Basic Types)</title><link href="http://localhost:4000/scala/2017/12/01/scala_day9.html" rel="alternate" type="text/html" title="Scala day 9 (Basic Types)" /><published>2017-12-01T08:44:17+08:00</published><updated>2017-12-01T08:44:17+08:00</updated><id>http://localhost:4000/scala/2017/12/01/scala_day9</id><content type="html" xml:base="http://localhost:4000/scala/2017/12/01/scala_day9.html">&lt;h2 id=&quot;basic-types&quot;&gt;Basic Types&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Byte,Short,Int,Long,Char 稱為 &lt;strong&gt;&lt;em&gt;integral types&lt;/em&gt;&lt;/strong&gt;．&lt;/li&gt;
  &lt;li&gt;integral types 再加上 Float,Double 稱為 &lt;strong&gt;&lt;em&gt;numeric types&lt;/em&gt;&lt;/strong&gt;．&lt;/li&gt;
  &lt;li&gt;只有 String 是在 java.lang 的 package 裡．&lt;/li&gt;
  &lt;li&gt;基本型態的大小 :&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;型態&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;大小&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;數值範圍&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Byte&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-2^7 ~ 2^7 - 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Short&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-2^15 ~ 2^15 - 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Int&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-2^31 ~ 2^31 - 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Long&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;64-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-2^63 ~ 2^63 -1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Char&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0 ~ 2^16 - 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Float&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Double&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;64-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true or false&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;em&gt;String&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;a sequence of Chars&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;literals&quot;&gt;Literals&lt;/h2&gt;

&lt;p&gt;Literals 想翻成中文還真模糊看了一堆資料感覺還是不知道該怎麼解釋比較好，但可以透過一些例子來了解一下它的觀念．
目前了解 literals 的概念大概是指的是指說可以直接寫一個常數值在程式碼裡，編譯器會根據程式寫的常數對應到該對應的型態．&lt;/p&gt;

&lt;h3 id=&quot;integer-literals&quot;&gt;Integer literals&lt;/h3&gt;
&lt;h4 id=&quot;longdouble&quot;&gt;Long、Double&lt;/h4&gt;
&lt;p&gt;轉成 Long 或 Double，Long 在後面加上 Ｌ 或 l ，Double 在後面加上 D 或 d ．&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val hexNum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x1aFL
&lt;span class=&quot;go&quot;&gt;hexNum: Long = 431

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val hexNum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 168d
&lt;span class=&quot;go&quot;&gt;hexNum: Double = 168.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;byteshort&quot;&gt;Byte、Short&lt;/h4&gt;
&lt;p&gt;Byte 及 Short 在宣告變數時加上型態，compiler 時會檢查 value 是否超過大小 :&lt;br /&gt;
像 Byte 的範圍是 -2^7 ~ 2^7 - 1&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val num : Byte &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127
&lt;span class=&quot;go&quot;&gt;num: Byte = 127

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val num : Byte &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-128&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;num: Byte = -128

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val num : Short &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127
&lt;span class=&quot;go&quot;&gt;num: Short = 127

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;hexadecimal-literals&quot;&gt;hexadecimal literals&lt;/h4&gt;
&lt;p&gt;16進位(hexadecimal)，開頭要寫 0x 或 0X，內容為數字1~9、大小寫字母a~f．&lt;br /&gt;
順便複習一下16進位轉10進位的算法 : &lt;br /&gt;
1AF(16進位)&lt;br /&gt;
-&amp;gt; 1 * 16^2 + 10 * 16^1 + 15 * 16^0&lt;br /&gt;
-&amp;gt; 1 * 16 * 16 + 10 * 16 + 15 * 1 = 256 + 160 + 15 = 431(10進位)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val hexNum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x1aF
&lt;span class=&quot;go&quot;&gt;hexNum: Int = 431
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;octal-literals&quot;&gt;octal literals&lt;/h4&gt;
&lt;p&gt;這裡使用的 scala 版本是 2.12.4，所以已經將 8 進位(octal)的 literals 移掉了．&lt;br /&gt;
Remove octal number literals : &lt;a href=&quot;https://issues.scala-lang.org/browse/SI-7618&quot;&gt;SI-7618&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val num &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 035
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: Decimal integer literals may not have a leading zero. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Octal syntax is obsolete.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;       val num = 035
                 ^

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;要轉8進位時，scala 有提供一個 BigInt 的物件，可以轉任何進位 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val num1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BigInt&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;35&quot;&lt;/span&gt; , 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;num1: scala.math.BigInt = 35

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val num1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BigInt&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;35&quot;&lt;/span&gt; , 8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;num1: scala.math.BigInt = 29

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val num1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BigInt&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;35&quot;&lt;/span&gt; , 16&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;num1: scala.math.BigInt = 53

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;character-literals&quot;&gt;Character literals&lt;/h4&gt;
&lt;p&gt;用單引號包起來的 Unicode 字元 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c: Char = A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\u0041'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c: Char = A

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\\'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c: Char = \
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;跳脫字元&quot;&gt;跳脫字元&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;跳脫字元&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;意思&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;換行 (\u000A)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;倒退一個字元 (\u0008)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\t&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tab (\u0009)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;換頁 (\u000C)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\r&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;游標移至行首 (\u000D)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&quot;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;double quote (\u0022)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;'&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;single quote (\u0027)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;backslash (＼\u005C)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;要用 unicode 來表示會有一些規則要注意，真的要用到時再查一下，這邊先列幾個例子 :&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\u000A'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c: Char =

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; c + &lt;span class=&quot;s2&quot;&gt;&quot;Hi&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;s: String =
&quot;
Hi&quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\u0022'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c: Char = &quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\u005C\u0027'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c: Char = '

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\u005C\u005C'&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c: Char = \
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;string-literals&quot;&gt;String literals&lt;/h4&gt;
&lt;p&gt;用雙引號包多個字元組成的字串 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val msg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Daniel&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;msg: String = Hello &quot;Daniel&quot;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Scala 還提供了一個很方便的功能叫 raw strings，是使用三個雙引號包起來的字串，
裡面的字串都會被當成純文字，不會被跳脫字元影響 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val msg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;Hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Daniel&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;msg: String = Hello \&quot;Daniel\&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;boolean-literals&quot;&gt;Boolean literals&lt;/h4&gt;
&lt;p&gt;就是 true 跟 false&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val check &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;check: Boolean = true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;symbol-literals&quot;&gt;Symbol literals&lt;/h4&gt;
&lt;p&gt;scala 還有一個比較特別的是 Symbol literals，可以用 .name 取出內容 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val s &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Daniel
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;s: Symbol = 'Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; s.name
&lt;span class=&quot;go&quot;&gt;res0: String = Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sayHi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;names: Symbol&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi &quot;&lt;/span&gt; + names.name
&lt;span class=&quot;go&quot;&gt;sayHi: (names: Symbol)String

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sayHi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Daniel)
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;res5: String = Hi Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sayHi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sam)
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;res6: String = Hi Sam
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;基本型別使用上感覺跟其他語言差不多，但覺得 String literals 的 raw strings (“”” “”“)真的很方便，不用想跳脫字元的問題．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Basic Types</summary></entry><entry><title type="html">Scala day 8 (Class &amp;amp; Object)</title><link href="http://localhost:4000/scala/2017/11/30/scala_day8.html" rel="alternate" type="text/html" title="Scala day 8 (Class &amp; Object)" /><published>2017-11-30T10:44:17+08:00</published><updated>2017-11-30T10:44:17+08:00</updated><id>http://localhost:4000/scala/2017/11/30/scala_day8</id><content type="html" xml:base="http://localhost:4000/scala/2017/11/30/scala_day8.html">&lt;h2 id=&quot;define-class&quot;&gt;define Class&lt;/h2&gt;
&lt;p&gt;scala 在定義 class 沒給修飾子(private,protected)的話，預設是 public 的．&lt;br /&gt;
一個 class 的 members 會有屬性(field)或方法(method)，屬性會用來存取該物件的值，物件提供方法讓外部呼叫．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Employee &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val id = &quot;1&quot;
     |  val name = &quot;Daniel&quot;
     |  def work = println(&quot;working...&quot;)
     | }
defined class Employee
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 new 建立 class 的 object :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val emp &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Employee
&lt;span class=&quot;go&quot;&gt;emp: Employee = Employee@238015c9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;取得物件的變數值，呼叫物件的方法 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; emp.id
&lt;span class=&quot;go&quot;&gt;res13: String = 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; emp.work
&lt;span class=&quot;go&quot;&gt;working...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;scala function 的參數都是 val 的不可修改，但屬性可以是 var．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;amt:Int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; amt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1000
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:11: error: reassignment to val
&lt;span class=&quot;go&quot;&gt;       def sum(amt:Int) = amt = 1000
                              ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果不想讓外部直接取得變數值，可以用 private 修飾子，再提供 method 給外部對該變數做修改：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Employee &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  val id = &quot;1&quot;
     |  val name = &quot;Daniel&quot;
     |  private var skill = &quot;programing&quot;
     |  def updateSkill(newSkill: String) = skill = newSkill
     |  def work = println(skill)
     | }
defined class Employee

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val e1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Employee
&lt;span class=&quot;go&quot;&gt;e1: Employee = Employee@3767b38b

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; e1.work
&lt;span class=&quot;go&quot;&gt;programing

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; e1.updateSkill&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;singing&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; e1.work
&lt;span class=&quot;go&quot;&gt;singing
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 scala 分號(semicolon)在結尾是可以不必要的，通常都會省略，但如果要把多段程式碼寫成一行，就會需要：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; e1.updateSkill&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;teaching&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; e1.work
&lt;span class=&quot;go&quot;&gt;teaching
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;define-object&quot;&gt;define object&lt;/h2&gt;
&lt;p&gt;scala 並沒有像 java 一樣有 static members，所以需利用 Singleton object (只會有一個 object)，來達到 static 的效果 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object Account &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  private var sum = 0
     |  def addAmt(amt: Int) = sum += amt
     |  def getAmt = sum
     | }
defined object Account

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; class Boss &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def addSalary(amt: Int) = Account.addAmt(amt)
     |  def getSum = Account.getAmt
     | }
defined class Boss

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val boss1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Boss
&lt;span class=&quot;go&quot;&gt;boss1: Boss = Boss@1f5cb417

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val boss2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Boss
&lt;span class=&quot;go&quot;&gt;boss2: Boss = Boss@5113d1f2

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; boss1.addSalary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; boss2.getSum
&lt;span class=&quot;go&quot;&gt;res25: Int = 1000

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; boss2.addSalary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; boss1.getSum
&lt;span class=&quot;go&quot;&gt;res27: Int = 6000

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;scala object 是 Singleton 的，在執行時期只會有一份，無法使用 new ．&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; Account.getAmt
&lt;span class=&quot;go&quot;&gt;res28: Int = 6000

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val account1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Account
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:11: error: not found: &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;Account
&lt;span class=&quot;go&quot;&gt;       val account1 = new Account
                          ^
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;object-main-method&quot;&gt;object main method&lt;/h2&gt;
&lt;p&gt;在執行 scala 程式時，程式進入點會從 object main method 進入 :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; object HelloObj &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;     |  def main(args: Array[String]) {
     |   println(&quot;Hello &quot; + args(0))
     |  }
     | }
defined object HelloObj

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; HelloObj.main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello Daniel
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 沒有 static ，但其實 Singleton object 跟 static 在概念上感覺是一樣的，在記憶體裡都只會有一份．&lt;/li&gt;
  &lt;li&gt;scala 的  有宣告 main 方法的話，就可以變成了程式進入點．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">define Class scala 在定義 class 沒給修飾子(private,protected)的話，預設是 public 的． 一個 class 的 members 會有屬性(field)或方法(method)，屬性會用來存取該物件的值，物件提供方法讓外部呼叫．</summary></entry><entry><title type="html">Scala day 7 (tuples)</title><link href="http://localhost:4000/scala/2017/11/30/scala_day7.html" rel="alternate" type="text/html" title="Scala day 7 (tuples)" /><published>2017-11-30T09:44:17+08:00</published><updated>2017-11-30T09:44:17+08:00</updated><id>http://localhost:4000/scala/2017/11/30/scala_day7</id><content type="html" xml:base="http://localhost:4000/scala/2017/11/30/scala_day7.html">&lt;h2 id=&quot;tuple&quot;&gt;tuple&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;tuple 的格式像這樣 (element1 , element1 , …)&lt;/li&gt;
  &lt;li&gt;tuple 是可存取不同型態的一個物件．&lt;/li&gt;
  &lt;li&gt;tuple 是 &lt;strong&gt;immutable&lt;/strong&gt; 的．&lt;/li&gt;
  &lt;li&gt;使用 ._ 取得 tuples 的 element ．&lt;/li&gt;
  &lt;li&gt;其實 tuple 是根據 element 的數量，scala 幫你 new Tuple 的物件，例 : new Tuple2 , new Tuple3 , … , new Tuple22&lt;/li&gt;
  &lt;li&gt;tuple 的 elements 目前最多只能存到 22 個，如果超過可能也要思考一下設計面是否恰當．&lt;/li&gt;
  &lt;li&gt;tuple 如果只有兩個 element 的話，可以用 &lt;strong&gt;(element1) -&amp;gt; (element2)&lt;/strong&gt; 產生．&lt;/li&gt;
  &lt;li&gt;tuple 的值也可以用變數存取．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample Code :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val nums &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;,2D,3L&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nums: (Int, String, Double, Long) = (1,a,2.0,3)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; nums._1
&lt;span class=&quot;go&quot;&gt;res34: Int = 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val tupleObj &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;:1: error: too many elements &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;tuple: 23, allowed: 22
&lt;span class=&quot;go&quot;&gt;       val tupleObj = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)
                      ^

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val t22 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Tuple22&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;t22: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int) = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; 1 -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res1: (Int, String) = (1,Daniel)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id,name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1 -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;id: Int = 1
name: String = Daniel

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; id
&lt;span class=&quot;go&quot;&gt;res2: Int = 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;find-tuple-&quot;&gt;find tuple :&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val empList &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;-&amp;gt;10,&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;-&amp;gt;20,&lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;-&amp;gt;30,&lt;span class=&quot;s2&quot;&gt;&quot;Ray&quot;&lt;/span&gt;-&amp;gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;empList: List[(String, Int)] = List((Sam,10), (Daniel,20), (Jack,30), (Ray,40))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def findName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name:String,empList:List[&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;String,Int&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; empList.filter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;emp &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; emp._1 &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;findName: (name: String, empList: List[(String, Int)])List[(String, Int)]

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; findName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,empList&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;._2
&lt;span class=&quot;go&quot;&gt;res7: Int = 20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;sum-tuple-&quot;&gt;sum tuple :&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val wordsCount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;-&amp;gt;10,&lt;span class=&quot;s1&quot;&gt;'C'&lt;/span&gt;-&amp;gt;20,&lt;span class=&quot;s1&quot;&gt;'E'&lt;/span&gt;-&amp;gt;30,&lt;span class=&quot;s1&quot;&gt;'Y'&lt;/span&gt;-&amp;gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;wordsCount: List[(Char, Int)] = List((A,10), (C,20), (E,30), (Y,40))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;wordsData:List[&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Char,Int&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; wordsData.map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_._2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.sum
&lt;span class=&quot;go&quot;&gt;sum: (wordsData: List[(Char, Int)])Int

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;wordsCount&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res9: Int = 100
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;foldleft-版本-有foldfoldleftfoldright-之後再介紹-&quot;&gt;foldLeft 版本 (有fold、foldLeft、foldRight 之後再介紹) :&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; val wordsCount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;-&amp;gt;10,&lt;span class=&quot;s1&quot;&gt;'C'&lt;/span&gt;-&amp;gt;20,&lt;span class=&quot;s1&quot;&gt;'E'&lt;/span&gt;-&amp;gt;30,&lt;span class=&quot;s1&quot;&gt;'Y'&lt;/span&gt;-&amp;gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;wordsCount: List[(Char, Int)] = List((A,10), (C,20), (E,30), (Y,40))

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; def sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;wordsData:List[&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Char,Int&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; wordsData.foldLeft&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;){(&lt;/span&gt;sum,tup&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; sum + tup._2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sum: (wordsData: List[(Char, Int)])Int

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;scala&amp;gt;&lt;/span&gt; sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;wordsCount&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;res11: Int = 100
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;scala 的 tuple 由於可以存放不同型態的物件，所以彈性很大，可以省略定義一些單純存放資料的物件，直接用 tuple 傳遞即可．&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">tuple tuple 的格式像這樣 (element1 , element1 , …) tuple 是可存取不同型態的一個物件． tuple 是 immutable 的． 使用 ._ 取得 tuples 的 element ． 其實 tuple 是根據 element 的數量，scala 幫你 new Tuple 的物件，例 : new Tuple2 , new Tuple3 , … , new Tuple22 tuple 的 elements 目前最多只能存到 22 個，如果超過可能也要思考一下設計面是否恰當． tuple 如果只有兩個 element 的話，可以用 (element1) -&amp;gt; (element2) 產生． tuple 的值也可以用變數存取．</summary></entry></feed>