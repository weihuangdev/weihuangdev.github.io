---
layout: post
title:  "go day 32 (read file to mongo)"
date:   2018-10-31 12:45:17 +0800
categories: go
---


測試檔案  

```
> cat 20181011_report
96,2288266
240,3501
144,29
192,77
193,5131
241,317
...
```

程式碼 :  

```
package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	strcv "strconv"
	"strings"
	"time"

	"gopkg.in/mgo.v2"
)

type LabelCount struct {
	LabelIndex int64     "bson:`labelIndex`"
	CreatedAt  time.Time "bson:`createdAt`"
	Count      int64     "bson:`count`"
	UpdatedAt  time.Time "bson:`updatedAt`"
}

func main() {
	fmt.Println(time.Now().Format("Y-m-d H:i:s"))
	file, err := os.Open("/Volumes/Transcend/test/20181011_report")
	if err != nil {
		fmt.Println("error")
	}

	var mydb = getDB()
	mydb.Login("root", "123456")
	c := mydb.C("LabelCount_TEST")
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lineData := strings.Split(scanner.Text(), ",")
		labelIndex, err1 := strcv.ParseInt(lineData[0], 10, 64)
		if err1 != nil {
			log.Fatal(err1)
		}
		count, err2 := strcv.ParseInt(lineData[1], 10, 64)
		if err2 != nil {
			log.Fatal(err2)
		}
		err := c.Insert(&LabelCount{LabelIndex: labelIndex, CreatedAt: time.Now(), Count: count, UpdatedAt: time.Now()})
		if err != nil {
			log.Fatal(err)
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

}
func getDB() *mgo.Database {
	session, err := mgo.Dial("127.0.0.1:27017")
	if err != nil {
		panic(err)
	}

	session.SetMode(mgo.Monotonic, true)
	db := session.DB("admin") //root user is created in the admin authentication database and given the role of root.
	return db
}
```


Go 時間 format  

```
t := time.Now()
fmt.Println(t.Format("2006-01-02 15:04:05")) // 2018-10-11 12:11:13
```

> 參考資料  
> [go-date-time-format](https://flaviocopes.com/go-date-time-format/)



