---
layout: post
title:  "Scala day 22 (Companion Object & apply & unapply & update)"
date:   2017-12-21 10:44:17 +0800
categories: scala
---

### Companion Object
如果 object 的名稱和 class 名稱相同，稱為 Companion Object (Employee)．
由於 Companion Object 是要將 trait 與 object 定義在同一個檔案裡，但由於這邊是使用 REPL 做 demo，
所以再用一個 object(Emp) 把它們包起來，否則 REPL 的環境不會被視為是 Companion Object，如果是定義在一個 Employee.scala 檔案裡，則不用 Emp 包起來 : 

```console
scala> import scala.collection.mutable.ListBuffer
import scala.collection.mutable.ListBuffer

scala> object Emp {
     |
     |   class Employee(val salary: Int)
     |
     |   object Employee {
     |
     |     private val emps: ListBuffer[Employee] = new ListBuffer[Employee]
     |
     |     private var sum = 0
     |
     |     def addEmp(emp:Employee) = emps += emp
     |
     |     def sumSalary = {
     |       emps.foreach(emp => sum += emp.salary)
     |       sum
     |     }
     |   }
     | }
defined object Emp

scala> Emp.Employee.addEmp(new Emp.Employee(10))
res0: scala.collection.mutable.ListBuffer[Emp.Employee] = ListBuffer(Emp$Employee@35eee641)

scala> Emp.Employee.addEmp(new Emp.Employee(20))
res1: scala.collection.mutable.ListBuffer[Emp.Employee] = ListBuffer(Emp$Employee@35eee641, Emp$Employee@4f3c7808)

scala> Emp.Employee.sumSalary
res2: Int = 30
```

### apply function
就是將參數傳給(apply) function 的意思

```console
scala> val sum = (num1:Int,num2:Int) => num1 + num2
sum: (Int, Int) => Int = $$Lambda$1197/530446114@3f06abd

scala> sum(2,3)
res15: Int = 5

scala> sum.apply(2,3)
res14: Int = 5
```
將參數傳給(apply) object

```console
scala> object Counter {
     |  val baseNum = 10
     |  def apply(num1:Int , num2:Int) = baseNum + num1 + num2
     | }
defined object Counter

scala> Counter(2,3)
res16: Int = 15
```

### unapply function
unapply 這功能可以方便 match expressions．

```console
scala> object Student {
     |     def unapply(str: String): Option[(String, String, String)] = {
     |         val parts = str.split(",")
     |         if (parts.length == 3) {
     |           Some(parts(0), parts(1), parts(2))
     |         } else {
     |           None
     |         }
     |     }
     | }
defined object Student
```

```console
scala> val Student(name,tel,addr) = "Sam,29837162,新竹市"
name: String = Sam
tel: String = 29837162
addr: String = 新竹市
```

```console
scala> val students = List(
     |   "Daniel,212345678,台北市",
     |   "Andy,37164832,桃園市",
     |   "aaaaaaaaa",
     |   "Jack,48572617,新北市"
     | )
students: List[String] = List(Daniel,212345678,台北市, Andy,37164832,桃園市, aaaaaaaaa, Jack,48572617,新北市)

scala> students.foreach(_ match {
     |     case Student(name, tel, addr) if addr == "桃園市" => println(name)
     |     case _ => println("no matching")
     | })
no matching
Andy
no matching
no matching
```

scala 的 case class 實作了 apply，也已實作了 unapply function，所以很適合用來做 match 比對 : 

```console
scala> case class Person(name: String, tel: String)
defined class Person
```
實作了 apply 所以不用寫 new :  

```console
scala> val p = Person("Daniel","29152736")
p: Person = Person(Daniel,29152736)
```
實作了 unapply 所以可以 math 比對 : 

```console
scala> p match { case Person(n,t) => println(n,t) }
(Daniel,29152736)
```

### update function
定義 : 
a(x) = y 相當於 a.update(x, y)，a(x,y) = x 相當於 a.update(x,y,z) 以此類推．

```console
scala> class Cellphone {
     |
     |   val numbers = scala.collection.mutable.Map[String,(Int,Int)]()
     |
     |   def apply(name:String) = numbers(name)
     |   def update(name:String, number:(Int,Int)) = numbers(name) = number
     | }
defined class Cellphone

scala> val phonebook = new Cellphone
phonebook: Cellphone = Cellphone@1d9af731
```
會呼叫 Cellphone 的 update 方法 : 

```console
scala> phonebook("Daniel")=(123,45678)

scala> phonebook("Sam")=(321,876543)
```
會呼叫 Cellphone 的 apply 方法 : 

```console
scala> phonebook("Daniel")
res5: (Int, Int) = (123,45678)

scala> phonebook("Sam")
res6: (Int, Int) = (321,876543)
```

### Companion Object with apply
apply 可以設計成為 factory pattern : 

```console
scala> object Trans {
     |   trait Transportation {
     |     def go
     |   }
     |   object Transportation {
     |     private class Car extends Transportation {
     |       override def go {println("drive car")}
     |     }
     |     private class Boat extends Transportation {
     |       override def go {println("drive boat")}
     |     }
     |     def apply(name:String): Transportation = {
     |       if(name == "car") {
     |         new Car
     |       } else {
     |         new Boat
     |       }
     |     }
     |   }
     | }
defined object Trans

scala> val car = Trans.Transportation("car")
car: Trans.Transportation = Trans$Transportation$Car@178cfe5e

scala> car.go
drive car

scala> val boat = Trans.Transportation("boat")
boat: Trans.Transportation = Trans$Transportation$Boat@31e90355

scala> boat.go
drive boat

```


### 總結
- - -
* 在 scala 裡 object 可被視為 function，function 也可被視為 object，這觀念跟物件導向的觀念不太一樣，感覺 Companion Object 、apply、update 等功能也是為了要實作 functional programming．


### 參考資料
- - -
https://stackoverflow.com/questions/9737352/what-is-the-apply-function-in-scala


